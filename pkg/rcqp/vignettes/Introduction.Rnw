\documentclass{article}
\SweaveOpts{engine=R,eps=FALSE,pdf=TRUE,width=5,height=3,strip.white=TRUE,keep.source=TRUE}
\title{Introduction to the rcqp package}
\author{Bernard Desgraupes and Sylvain Loiseau\\<bdesgraupes@orange.fr>, <sylvain.loiseau@univ-paris13.fr>}
\date{\today}
\begin{document}
\maketitle
\begin{abstract}

rcqp R library is a wrapper onto the CWB software. The CWB library, used in the field of corpus
linguistics, allows for indexing and querying large annotated corpora. The rcqp
library include CWB (as shared library) and allows using R for running
cwb and import cwb output into statistical analyses.

\end{abstract}

<<preliminaries, echo=FALSE>>=
options(width=75)
Sys.setenv("CORPUS_REGISTRY"=system.file("extdata", "registry", package = "rcqp"))
@

\section{Introduction}
\label{sec:Intro}

The CWB (Corpus Workbench) software\footnote{http://cwb.sourceforge.net/} is a
set of tools for corpus linguistics, providing a powerful indexation and query
engine for annotated copora. An interactive command line program called CQP
(corpus query processor) is provided, as well as a client/server solution.

CWB offers access to corpora through manipulation of vectors of positions
(offsets of the adressed / requested word(s) in the corpus) which can be turned
into the corresponding word form, lemma, or part of speech if the corpus
provide these information.

In rcqp, CWB is turned into a shared library. As a result:
\begin{itemize}
\item the CWB data structures are mainly vectors, which are very convenient to manipulate in R;
\item R vector are wrapper onto the inner CWB C arrays, without conversion of socket communication;
\item rcqp provide an easy way to run and query CWB, without having to separatly compile and
install CWB;
\item rcqp allows for examinating the the complexe data accessed though CWB with the statistical power of R.
\end{itemize}

In rcqp, four different ways of calling CWB are provided:

\begin{itemize}
\item You can call CWB through the "cqi_*" set of functions. These 
functions implement an interface defined by CWB (CQi). 
\item You can use a set of more "high-level" functions for producing 
quantitative structures (frequency list, cross-tabulated frequency table), 
or kwic.
\item You can use a kind of interactive shell inside R, mimicking basic 
features of the "cqp" command line utilities.
\item At last, you can use a small GUI writen in tk for running query and 
displaying result as a kwic list.
\end{itemize}

% ----------------------------------------------------------------
% ----------------------------------------------------------------


\section{The CQi set of functions}
\label{sec:cqi}

All functions are prefixed with cqi_.

\subsection{A sample session}

<<cqi_session, echo=TRUE>>=

library(rcqp)

corpora <- cqi_list_corpora()
corpora

# create the subcorpus "Interesting" (does not return any result).
cqi_query("DICKENS", "Interesting", "[lemma=\"interesting\"]");

# in the CQi API, the qualified name of subcorpus is corpus:subcorpus:
nbr_hit <- cqi_subcorpus_size("DICKENS:Interesting");

# A matrix of cpos (token rank), one line by hit, four columns: match, matchend, target, keyword.
dump <- cqi_dump_subcorpus("DICKENS:Interesting",1,nbr_hit)
dump[1:10,]

# get the lemma of the "match" slot of each hit:
# Word's attributes (such as "lemma", "word", "pos") are always accessed 
# through qualified name : "corpus.attribute"
lemma <- cqi_cpos2str("DICKENS.lemma", dump[,1])

# You can acheave the same result in one more steps, using id as an 
# intermediate step: 
ids <- cqi_cpos2id("DICKENS.lemma", dump[,1]);
lemma <- cqi_id2str("DICKENS.lemma", ids);

# cqi_fdist1 create a frequency list according to one field (match, 
# matchend...) in a query; cqi_fdist2 a cross tabulated 
# frequency table according to two fields in a query

flist <- cqi_fdist1("DICKENS:Interesting", "match", "word")
flist

# cqi_fdist1 et cqi_fdist2 return numeric matrix : (lemma) id -> freq.
# use id2str in order to turn the (word) id into its form. 
data.frame(cqi_id2str("DICKENS.word", flist[,1]), flist[,2])

@

\label{sec:cqi-session}

\subsection{Data-model}

In order to get a picture of the data model used into CWB, see section 1.2 
of the \textit{CQP Query Language Tutorial}, Stefan Evert \& The OCWB 
Development Team, 17 February 2010.

A corpus is divided in position (rank), each token having a position. 
A corpus may be represented in an array. Here are the first 20 positions 
of the DICKENS demo corpus.

<<cqi_corpus_representation, echo=FALSE>>=
c <- corpus("DICKENS")
c
@

They are, first, several columns corresponding to "structural attribute", 
i.e. span of tokens like XML tag surrounding tokens. Each 
span for each structural attribute as an id. While the id is the 
same in a column, the corresponding tokens belong to the same span. 

They are, then, several columns containing string. They are the 
"positional attribute" of each word: lemma, word-form, pos, other 
information... Each positional attribute has his list of ids for coding 
each possible form.

Moreover, certains structural attribute have a string value associated 
with each id (while each id is unique, string value can be repeated). For 
instance, the np_h structural attribute, giving the head of the noun 
phrase, hold a string value.

In CQi function names, the following convention are used:

\begin{itemize}
\item cpos : a position, or rank, identifying a unique token in the corpus
\item id : a form of a given positional attribute.
\item struc : a given span of a structural attribute 
\item str : the corresponding to a given id of a positional attribute or 
of a structural attribute having a value.
\end{itemize}

\subsection{Functions}
\label{sec:cqi-functions}

\paragraph{cqi_attribute_size}
\paragraph{cqi_attributes}
\paragraph{cqi_alg2cpos}
\paragraph{cqi_corpus_info}
\paragraph{cqi_cpos2alg}
\paragraph{cqi_cpos2id}
\paragraph{cqi_cpos2lbound}
\paragraph{cqi_cpos2rbound}
\paragraph{cqi_cpos2str}
\paragraph{cqi_cpos2struc}
\paragraph{cqi_drop_subcorpus}
\paragraph{cqi_dump_subcorpus}
\paragraph{cqi_fdist1}
\paragraph{cqi_fdist2}
\paragraph{cqi_full_name}
\paragraph{cqi_id2cpos}
\paragraph{cqi_id2freq}
\paragraph{cqi_id2str}
\paragraph{cqi_lexicon_size}
\paragraph{cqi_list_corpora}
\paragraph{cqi_list_subcorpora}
\paragraph{cqi_query}
\paragraph{cqi_regex2id}
\paragraph{cqi_str2id}
\paragraph{cqi_struc2cpos}
\paragraph{cqi_struc2str}
\paragraph{cqi_structural_attribute_has_values}
\paragraph{cqi_subcorpus_size}

% ----------------------------------------------------------------
% ----------------------------------------------------------------

\section{integrating CQP into R}

A set of high-level functions is aimed at making more easy the use of cqp 
with R and more self-expanatory the data model of CWB.

\subsection{A sample session}
\label{sec:rcqp-session}

<<rcqp_session, echo=TRUE>>=
# create a corpus
c <- corpus("VIE_FR")
c # print all information for a span of tokens (default : 0->20).
print(c, from=200, to=210) # change the default token span.

c <- corpus("DICKENS")
c

# summary give a quick view of the information available in the corpus,
# it does not display actual information:
summary(c)

@

\subsection{Functions}

\label{sec:rcqp-functions}

\subsubsection{S3 object cqp_corpus}

An object cqp_corpus is created with the function corpus(). This object 
may be used with the two functions below, as well as for creating 
cqp_subcorpus, cqp_filst and cqp_ftable objects (see bellow).

\paragraph{print.cqp_corpus}

Print all information (but the value of structural attribute having a 
value) as a data.frame.

\paragraph{summary.cqp_corpus}

Give the number of tokens of a corpus, list all the attributes 
(positionnal, structural, alignment) ; for each positional attribute (and 
structural attribute having a value) give the number of types and print 
some types.

\subsubsection{S3 object cqp_subcorpus}

An object cqp_subcorpus is created with the function subcorpus().

\paragraph{print.cqp_subcorpus}

Print a given positional attribute (default: word) in a KWIC (key-word in 
context) form.

\paragraph{summary.cqp_corpus}

\subsubsection{S3 object cqp_flist}

An object cqp_flist hold a frequency list and is created with the function 
flist().

A frequency list give the number of tokens for each types of a positional 
attribute.

\paragraph{print.cqp_corpus}

\paragraph{summary.cqp_corpus}

\subsubsection{S3 object cqp_ftable}

An object cqp_ftable hold a frequency table and is created with the 
functions struct2ftable.cqp_corpus() or ftable.cqp_subcorpus().

A frequency table give the number of tokens for each types of a positional 
attribute and for a set of sub-parts of the corpus.

\paragraph{print.cqp_corpus}

\paragraph{summary.cqp_corpus}


% ----------------------------------------------------------------
% ----------------------------------------------------------------

\section{ínteractive shell in R}

\subsection{A sample session}
\label{sec:rcqp-session}

<<rcqp_session, echo=TRUE>>=

@

\begin{Schunk}
\begin{Sinput}

\end{Sinput}
\end{Schunk}

\end{document}
