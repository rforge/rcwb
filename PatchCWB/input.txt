			    rcqp_receive_error(1);}
		if (upline) TTYputs(upline);
	    TTYputs((EL_CONST CHAR *)newline);
	    TTYputs(move_right);
	    if (RequireNLforWrap && downline) TTYputs(downline);
	    if (downline && RequireNLforWrap) TTYputs(downline);
	    if (upline) TTYputs(upline);
	  (exit 1); exit
	-1	accept one connection only, then exit
	TTYputs((CHAR *)Prompt);
	TTYputs((CHAR *)backspace);
	TTYputs((CHAR *)newline);
	TTYputs((EL_CONST CHAR *)"want to see them all (y/n) ? ");
	TTYputs((EL_CONST CHAR *)Prompt);
	TTYputs((EL_CONST CHAR *)info1);
	TTYputs((EL_CONST CHAR *)newline);
	TTYputs(bol);
	TTYputs(upline);
	\$INSTALL \$INSTFLAGS_BIN \$INSTFLAGS_EXTRA "\${prog}" "\${BINDIR}" || exit 1
	\$INSTALL \$INSTFLAGS_DATA \$INSTFLAGS_EXTRA "\${manpage}" "\${REALMANDIR}" || exit 1
	\$INSTALL \$INSTFLAGS_DIR \$INSTFLAGS_EXTRA "\${BINDIR}" || exit 1
	\$INSTALL \$INSTFLAGS_DIR \$INSTFLAGS_EXTRA "\${LIBDIR}" || exit 1
	\$INSTALL \$INSTFLAGS_DIR \$INSTFLAGS_EXTRA "\${REALINCDIR}" || exit 1
	rcqp_receive_error( YY_EXIT_FAILURE );
	for (i = strlen(header); i; i--)Rprintf( " ");
Rprintf( "%-20s [A]\n", ai->attribute->any.name);
Rprintf( "%s", header);
Rprintf( "%s\n", 
Rprintf( "%s\n", ai->attribute->any.name);
Rprintf( "\t%s", (cl_struc_values(ai->attribute)) ? "-V" : "");
Rprintf( "characters\n"); break;
Rprintf( "tokens\n"); break;
Rprintf("%s\n",H.Lines[i]);
Rprintf("editline: MetaMap table full, requires increase\n");
Rprintf("editline: can't access history file \"%s\"\n",
	if (downline && RequireNLforWrap) TTYputs(downline);
	if (downline && RequireNLforWrap) TTYputs(downline);    
	if (upline) TTYputs(upline);
    	(void)Rprintf( "%s\n", msg );
                           Rprintf( "Winning cpos found at %d\n", cpos);
                         Rprintf( "Transition %d --%d-> %d  (pattern %d TRUE at cpos=%d)\n",
                        rcqp_receive_error(1);
                       Rprintf( "ALERT! Query lock violation.\n");
                  EXIT_SYM               { exit_cqp++; }
                 searched linearly by findcorpus() for every file in the directory (-> quadratic complexity). */
               Rprintf( "%s", copy);
               Rprintf( "%s", string);
               Rprintf( "  [#%d-#%d]",  first, first + size - 1);
               Rprintf( "  [#%d]",  first);
               Rprintf(
               Rprintf( 
               Rprintf( "  state %d, cpos %d...\n", state, cpos);
               Rprintf( ", warning issued only once).\n");
               Rprintf( "explicit XML tag <%s%s> for implicit s-attribute ignored (", 
             Rprintf( "\t%s", str);
             Rprintf( "%d\t", first);
             Rprintf( "%s", token);
             Rprintf(
             Rprintf( "%s Warning: ``%s'' not found in lexicon (ignored)\n", progname, s);
             Rprintf( "After simulation for transition %d:\n ", p);
             Rprintf( "Complete Matchlist after simulating transition %d: \n", p);
             Rprintf( "Error in externally sorted file - line number #%d out of range\n", num);
             Rprintf( "WARNING: Character count weight redefined (new value is %d)\n", weight);
             Rprintf( "cdaccess:decompressed read: Read error/2\n");
              if (k > 0)Rprintf( " ");
              if (nw!=2)Rprintf("WARNING: Line %d in word list '%s' contains %d words, ignored.\n",
            rcqp_receive_error(-1);
            rcqp_receive_error(1);
            fflush(redir->stream);
            rcqp_flush();
            fprintf(
           Rprintf( "%d\t", size);
           Rprintf( "\n");
           Rprintf( "  ... not within selected boundary\n");
           Rprintf( "  Character count [primary feature].\n");
           Rprintf( "  Word list (read from file <filename>).\n");
           Rprintf( ").\n");
           Rprintf( ")\n");
           Rprintf( "** AUTO-DELETING LABEL %s = %d\n",
           Rprintf( ", warning issued only once).\n");
           Rprintf( "After initial matching for transition %d: ", p);
           Rprintf( "Annotations of s-attribute <%s> not stored (", rng->name);
           Rprintf( "Attributes of open tag <%s ...> ignored because of syntax error (", rng->name);
           Rprintf( "Duplicate attribute value <%s %s=... %s=...> ignored (",
           Rprintf( "ERROR. Validation failed.\n");
           Rprintf( "ERROR: wrong # of args: %s\n",config[config_pointer]);
           Rprintf( "Error #2 in variable logic. Please contact developer.\n");
           Rprintf( "Error writing code for ID %d (%d, %d bits) at position %d. Aborted.\n",
           Rprintf( "Invalid corpus position #%s . Aborted.\n", token);
           Rprintf( "NFA sim terminated. Winner %d, running states %d\n",
           Rprintf( "Undeclared element attribute <%s %s=...> ignored (",
           Rprintf( "Usage: -C:<weight>\n");
           Rprintf( "Usage: -W:<weight>:<filename>\n");
           Rprintf( "Value of <%s> region exceeds maximum string length (%d > %d chars), truncated (", 
           Rprintf( "WARNING. The 'word' attribute must be created before using CQP on this corpus!\n");
           Rprintf( "Warning: %d missing </%s> tags inserted at end of input.\n", 
           Rprintf( "Warning: '%s' is not a valid feature set for s-attribute %s, replaced by empty set | (", 
           Rprintf( "Warning: missing </%s> tag inserted at end of input.\n", 
           Rprintf( "Warning: too many lines from external sort command (ignored).\n");
           Rprintf( "attributes:load_component: WARNING:\n\t"
           Rprintf( "cdaccess:decompressed read: Read error/1\n");
           Rprintf("  Shared <n>-grams (single characters, bigrams, trigrams, 4-grams).\n");
           Rprintf("  Shared words with freq. ratios f1/(f1+f2) and f2/(f1+f2) >= <threshold>.\n");
           Rprintf("ERROR: Cannot read word list file %s.\n",
           Rprintf("ERROR: cannot handle %d-grams: %s\n",n,config[config_pointer]);
           Rprintf("ERROR: wrong # of args: %s\n",config[config_pointer]);
           Rprintf("Usage: -<n>:<weight>  (n = 1..4)\n");
           Rprintf("Usage: -S:<weight>:<threshold>\n");
          "Outputs a list of the given s-attribute, with begin and end positions\n\n"
          <td class="memname">int <a class="el" href="cqp_8h.html#a6da4fd2cde8ab5a835a44764d35cf337">exit_cqp</a></td>
          <td class="memname">int <a class="el" href="options_8h.html#ab8ca0c571bfb8947d2c22275d916a278">save_on_exit</a></td>
          <td class="memname">void html_puts </td>
          <td class="memname">void sgml_puts </td>
          <td class="paramname"><em>exit_code</em></td><td>)</td>
          <td class="paramname"><em>exit_on_parse_errors</em>&#160;</td>
          else if(!(wordlist=fopen(filename,"r"))) rcqp_receive_error(-1);
          rcqp_receive_error(1);
          rcqp_receive_error(1);}
         Rprintf( " %s=\"..\"", cl_string_list_get(rng->el_atts_list, i));
         Rprintf( ", <%s>", rng->recursion_children[i]->name);
         Rprintf( "\t");
         Rprintf( "%d", entry->freq);
         Rprintf( "\n");
         Rprintf( " "); 
         Rprintf( "%d", cpos);
         Rprintf( "%s%c", rng->annot, '\0'); 
         Rprintf( " (anchored at beginning of string)");
         Rprintf( " (anchored at end of string)");
         Rprintf( " [%s]", cl_regopt_grain[i]);
         Rprintf( "%7d <%s> regions dropped because of deep nesting.\n",
         Rprintf( "%s Warning: read empty string from input file (ignored)\n",
         Rprintf( "%s", macro_arg[i]);
         Rprintf( "%s: ERROR <%s> regions do not form a partitioning of <%s> region!\n",
         Rprintf( ").\n");
         Rprintf( ")\n");
         Rprintf( "** AUTO-DELETING LABEL %s = %d\n",
         Rprintf( "-> Block %d, rest %d, offset %d\n",
         Rprintf( "Attribute %s.%s is declared, but not accessible (missing data?). Aborted.\n",
         Rprintf( "Attributes of open tag <%s ...> ignored because of syntax error (", rng->name);
         Rprintf( "Block miss: have %d, want %d\n",
         Rprintf( "CQi: CQI_ASK_FEATURE_* ... <unknown feature> not supported\n");
         Rprintf( "CQi: CQI_ASK_FEATURE_CL_2_3 ... CL v2.3 ok\n");
         Rprintf( "CQi: CQI_ASK_FEATURE_CQI_1_0 ... CQi v1.0 ok\n");
         Rprintf( "CQi: CQI_ASK_FEATURE_CQP_2_3 ... CQP v2.3 ok\n");
         Rprintf( "CQi: CQI_CTRL_ABORT signal ... ignored\n");
         Rprintf( "CQi: CQI_CTRL_BYE()\n");
         Rprintf( "CQi: CQI_CTRL_LAST_GENERAL_ERROR() => '%s'", cqi_error_string);
         Rprintf( "CQi: CQI_CTRL_PING()\n");
         Rprintf( "Can't compute boundaries for range #%d", line);
         Rprintf( "Can't compute left search space boundary match #%d", line);
         Rprintf( "Can't compute right search space boundary match #%d", line);
         Rprintf( "Can't compute search space boundaries for match #%d", line);
         Rprintf( "Can't create file %s. Aborted.\n", output_file);
         Rprintf( "Can't get group information for gid %d\n",
         Rprintf( "Can't write compressed file %s. Aborted.\n", output_file);
         Rprintf( "Error #1 in variable logic. Contact developer.\n");
         Rprintf( "Invalid debug mode: -d %s\nType '%s -h' for more information.\n",
         Rprintf( "Magic number incorrect in %s\n", fullname);
         Rprintf( "Malformed tag %s, inserted literally (", buf);
         Rprintf( "Parse errors while reading %s, exiting.\n",
         Rprintf( "Patching [%d,%d] to [%d,%d]\n",
         Rprintf( "Read error while reading subcorpus %s\n", cl->name);
         Rprintf( "Starting NFA simulation. Max bound is %d\n", boundary);
         Rprintf( "Warning: '%s' is not a valid feature set for -P %s/, replaced by empty set | (", 
         Rprintf( "Warning: filename '%s' of registry entry not in canonical format.\n"
         Rprintf( "Warning: implicit s-attribute <%s> open at end of input (should not have happened).\n",
         Rprintf( "Writing frequency table to %s ... ", output_file);
         Rprintf( "Writing frequency table to compressed file %s ... ", output_file);
         Rprintf( "attributes:ensure_component(): Warning:\n"
         Rprintf( "attributes:load_component(): Warning:\n"
         Rprintf( "calc_initial_ml: boolean not\n");
         Rprintf( "calc_initial_ml: boolean or\n");
         Rprintf( "calc_initial_ml: evaluate comparisons\n");
         Rprintf( "eval_bool: evaluate boolean and\n");
         Rprintf( "eval_bool: evaluate boolean implication\n");
         Rprintf( "eval_bool: evaluate boolean not\n");
         Rprintf( "eval_bool: evaluate boolean or\n");
         Rprintf( "eval_bool: evaluate comparisons\n");
         Rprintf( "|%2d %c ", cl_regopt_jumptable[ch], ch);
          if (i < (args-1))Rprintf( ", ");
        assert((*etptr)->node.right != NULL);  /* the right child must exit  */
        default:Rprintf("ERROR: unknown feature: %s\n",config[config_pointer]);
        rcqp_receive_error(1);
        rcqp_receive_error(2);
        rcqp_flush();
        rcqp_flush();
        fprintf(
       Rprintf( "%8d:  gap=%4d, b=%4d\n", codepos, gap, b);
       Rprintf( "# (%d levels of embedding: <%s>", n_atts, rng->name);
       Rprintf( "# (no recursive embedding allowed)\n");
       Rprintf( "%d ", line); 
       Rprintf( "%s\t%d\n", target_s, count);
       Rprintf( "%s\t%s\t%d\n", source_s, target_s, count);
       Rprintf( ").\n");
       Rprintf( "\n");
       Rprintf( SEPARATOR);
       Rprintf( "\t%s = '%s'\n", p->property, p->value);
       Rprintf( "  %7d  %s\n",
       Rprintf( "%3d %7d  %7d  %7d\n", 
       Rprintf( "%7d  %7d  %3d  %10d ",
       Rprintf( "\t");
       Rprintf( "  -l  convert to little endian format\n");
       Rprintf( "  -l  read integers in little endian format\n");
       Rprintf( "  -n  convert to network format [default]\n");
       Rprintf( "  -n  read integers in network format [default]\n");
       Rprintf( " - %s\n", cl_string_list_get(input_files, i));
       Rprintf( " <%s>", annot);
       Rprintf( "%c", InputBufferList->data[i]);
       Rprintf( "%s: (%d <%s> regions in %s vs. %d <%s> regions in %s)\n",
       Rprintf( "%s: -P option used twice\n", progname);
       Rprintf( "%s: -S switch used with inconsistent prealignment\n", progname);
       Rprintf( "%s: -V option requires s-attribute with annotations!\n",
       Rprintf( "%s: -c option used twice\n", progname);
       Rprintf( "%s: -d option used twice\n", progname);
       Rprintf( "%s: -r option used twice\n", progname);
       Rprintf( "%s: ERROR <%s> regions do not form a partitioning of <%s> region!\n",
       Rprintf( "%s: can't determine pathname for .alg file (internal error)\n", progname);
       Rprintf( "%s: column width must be in range %d .. %d\n",
       Rprintf( "(the format used by CWB binary data files).\n");
       Rprintf( ")");
       Rprintf( ").\n");
       Rprintf( ";;; makecomps:creat_freqs(): WARNING: index %d out of range\n", ptr);
       Rprintf( "Block hit: block[%d,%d]\n", block, rest);
       Rprintf( "CL: ");
       Rprintf( "CL: Regex optimised, %d grain(s) of length %d\n",
       Rprintf( "CL: grain set is");
       Rprintf( "CL: major error, invalid UTF8 string passed to cl_string_canonical...\n");
       Rprintf( "Can't open a-attribute %s.%s . Aborted.\n", corpus_id, argv[cnt]);
       Rprintf( "Can't open p-attribute %s.%s . Aborted.\n", corpus_id, argv[cnt]);
       Rprintf( "Can't open s-attribute %s.%s . Aborted.\n",
       Rprintf( "Can't read initialization file %s\n",
       Rprintf( "Can't read macro initialization file %s\n",
       Rprintf( "Close tag </%s> without matching open tag ignored (", rng->name);
       Rprintf( "ERROR reading file %s. Aborted.\n", huf_path);
       Rprintf( "ERROR reading from file %s (ignored).\n", current_input_file_name);
       Rprintf( "ERROR. Lexicon is missing. You must use the 'encode' tool first!\n");
       Rprintf( "ERROR. Validation failed.\n");
       Rprintf( "ERROR: File length of subcorpus is <= 0\n");
       Rprintf( "ERROR: can't create file %s\n", huf_path);
       Rprintf( "ERROR: can't create file %s\n", sync_path);
       Rprintf( "ERROR: writing %s failed. Aborted.\n",
       Rprintf( "ERROR: wrong occurrence of token #%d at cpos %d (correct cpos: %d). Aborted.\n",
       Rprintf( "ERROR: wrong sync offset %d (true offset %d) at cpos %d. Aborted.\n",
       Rprintf( "EXPAND MACRO %s(", name);
       Rprintf( "Environment variable %s has no value, exiting\n", optarg);
       Rprintf( "Error #3 in variable logic. Please contact developer.\n");
       Rprintf( "Error: -F option used twice.\n");
       Rprintf( "Error: -R option used twice.\n");
       Rprintf( "Error: -S <att> must be last flag on command line.\n\n");
       Rprintf( "Error: -V <att> must be last flag on command line.\n\n");
       Rprintf( "Error: -f option used twice\n\n");
       Rprintf( "Error: -o option used twice.\n");
       Rprintf( "Error: -r option used twice.\n");
       Rprintf( "Error: Existing regions of -S attributes have annotations.\n");
       Rprintf( "Error: Existing regions of -V attribute have no annotations.\n");
       Rprintf( "Error: can't initialise regex\n");
       Rprintf( "Fatal Error #6: no memory left.");
       Rprintf( "Internal error: unknown colour '%c'.\n", colour);
       Rprintf( "Invalid character set specified with the -c flag! Program aborts.\n");
       Rprintf( "Invalid corpus position #%s . Aborted.\n", s);
       Rprintf( "Invalid frequency value '%s' in -F %s options. Aborted.\n", strval, frequency_att);
       Rprintf( "Looking at matchlist element %d (cpos %d)\n"
       Rprintf( "Note: new subcorpus format\n");
       Rprintf( "Options:\n");
       Rprintf( "PARSE ERROR\n"); /*  */
       Rprintf( "Part of the IMS Open Corpus Workbench v" VERSION "\n\n");
       Rprintf( "Pointer inconsistency for id=%d. Aborting.\n", id);
       Rprintf( "Printing frequency table on NULL ... \n");
       Rprintf( "Progress: %6dK / %dK   \r", cpK, csK);
       Rprintf( "QOpt: %f (pos %d)\n", red, nr_pos);
       Rprintf( "QOpt: copied ranges\n");
       Rprintf( "READ ERROR -- aborting CQP session\n");
       Rprintf( "Reads 32bit integers in network format from CWB binary data file <file>\n");
       Rprintf( "Reads one integer per line from ASCII file <file> or from standard input\n");
       Rprintf( "Running sort: \n\t%s\n", sort_call);
       Rprintf( "S-attribute %s.%s does not have annotations. Aborted.\n",
       Rprintf( "SET ANNOTATION SYNTAX ERROR on line #%d:\n>> %s", input_line, buf);
       Rprintf( "Sorry, but this program is not set up to allow the\n"
       Rprintf( "Surplus </%s> tag ignored (", rng->name);
       Rprintf( "Syntax error, exiting\n");
       Rprintf( "Too many -V attributes, sorry. Aborted.\n");
       Rprintf( "Usage:  %s [options] [file]\n", argv[0]);
       Rprintf( "Value of p-attribute '%s' exceeds maximum string length (%d > %d chars), truncated (", 
       Rprintf( "WARNING: Annotation for -S attribute ignored on line #%d (warning issued only once):\n>> %s", input_line, buf);
       Rprintf( "Warning: %s: unknown print option\n",
       Rprintf( "Warning: no matches for key '%s' -- scan results will be empty\n", key);
       Rprintf( "Weird error in findcorpus\n");
       Rprintf( "[autogrow aborted because of low fill rate]\n");
       Rprintf( "\n");
       Rprintf( "\t%s\n", l->string ? l->string : "(null)");
       Rprintf( "and writes values to standard output as 32-bit integers in network format\n");
       Rprintf( "attributes/load_component: missing files of compressed PA,\n"
       Rprintf( "attributes:cl_delete_attribute():\n"
       Rprintf( "attributes:component_full_name(): Warning:\n"
       Rprintf( "attributes:ensure_component(): Warning:\n"
       Rprintf( "attributes:load_component(): Warning:\n"
       Rprintf( "eval_bool: evaluate id_list membership\n");
       Rprintf( "get_id_of_string: too many comparisons with %s\n",
       Rprintf( "options: can't get value of environment variable ``%s''\n", rname);
       Rprintf( "or from standard input and prints the values as ASCII numbers on standard\n");
       Rprintf( "output (one number per line).\n");
       Rprintf( "p-attribute %s.%s not defined. Aborted.\n",
       Rprintf( "storage:mallocfile():\n  couldn't read file contents -- ");
       Rprintf( "storage:mallocfile():\n  couldn't write file -- ");
       Rprintf( "storage:write_file_from_blob():\n"
       Rprintf("ERROR: feature parse error: %s\n", config[config_pointer]);
       Rprintf("WARNING: non-zero count detected\n");
       Rprintf( "<attribute type=positional name=\"%s\" anr=%d>\n",
        fputs("&amp;", fd);
        fputs("&gt;", fd);
        fputs("&lt;", fd);
        fputs("&quot;", fd);
        fputs(QueryBuffer, fd);
        perror("fputs() write error");
        return;                 /* exit CQi command interpreter */
      /*       Rprintf( "Cannot load REVCORP or REVCIDX component of %s\n",  */
      /*    Rprintf( "\n"); */
      /*Rprintf( "CL: WARNING realloc() to 0 bytes!\n"); */      
      /* if none of the components exits, we assume that the attribute will be created later & skip it */
      /* note also that this memory will NEVER be freed before the rpogram exits.*/
      break;                    /* the child exits the listen() loop */
      rcqp_receive_error(0);
      rcqp_receive_error(0);                  /* SIGCHLD should be reaped by calling process */
      rcqp_receive_error(1);
      rcqp_receive_error(2);
      exit_cqp = True;                /* NULL means we've had an EOF character */
      rcqp_flush();
     Rprintf( "------------------------------ ID %d (f: %d, b: %d)\n",
     Rprintf( "# <%s", rng->name);
     Rprintf( "%s\t%s", type, ai->attribute->any.name);
     Rprintf( "&nbsp;");
     Rprintf( "============================================================\n");
     Rprintf( "===Context Descriptor=======================================\n");
     Rprintf( "> ... </%s>\n", rng->name);
     Rprintf( "STRUCTURE %-20s # [annotations]\n", rng->name);
     Rprintf( "STRUCTURE %s\n", rng->name);
     Rprintf( "\n");
     Rprintf( "corpus position:  %s\n", cdp->print_cpos ? "shown" : "not shown");
     Rprintf( "left context:     %d ", cdp->left_width);
     Rprintf( "right context:    %d ", cdp->right_width);
     Rprintf( "target anchors:   %s\n", show_targets ? "shown" : "not shown");
     Rprintf( "%6d.\t", output_line);
     Rprintf( "%s\n", cl_charset_name(cl->corpus->charset));
     Rprintf( "<unsupported> (%s)\n", cl_corpus_property(cl->corpus, "charset"));
     Rprintf( "No further information available about %s\n", cl->name);
     Rprintf( "\t<none>\n");
     Rprintf( "\n");
     Rprintf( "    %7d\n", sum_codes);
     Rprintf( "   Item   f(item)  CL      Bits     Code, String\n");
     Rprintf( " CL  #codes  MinCode   SymIdx\n");
     Rprintf( "------------------------------------"
     Rprintf( "----------------------------------------\n");
     Rprintf( "Removed     smallest item %d with freq %d\n",
     Rprintf( "Removed 2nd smallest item %d with freq %d\n",
     Rprintf( "%d matches.\n", cl->size);
     Rprintf( "%d\t%d\t%d\t%d\n", 
     Rprintf(
     Rprintf( "      (possibly a syntax error in key '%s')\n", key);
     Rprintf( " %s", argv[optind]);
     Rprintf( " <--\n");
     Rprintf( " ==>");            /* symbolises macro expansion into next line */
     Rprintf( "%d ", cposlist[i]);
     Rprintf( "%d ", idlist[i]);
     Rprintf( "%d ", struclist[i]);
     Rprintf( "%s(%d): ", InputBufferList->macro->name, InputBufferList->macro->args);
     Rprintf( "%s: Corpus %s not found in registry %s . Aborted.\n",
     Rprintf( "%s: Couldn't open %s\n", progname, argv[i]);
     Rprintf( "%s: alignment attribute %s.%s not declared in registry file\n",
     Rprintf( "%s: can't determine pathname for .alx file (internal error)\n", progname);
     Rprintf( "%s: can't open s-attribute %s.%s\n",
     Rprintf( "%s: can't read compressed file %s\n", progname, align_name);
     Rprintf( "%s: can't read file %s\n", progname, align_name);
     Rprintf( "%s: can't write compressed file %s\n", progname, outfile_name);
     Rprintf( "%s: can't write file %s\n", progname, alg_name);
     Rprintf( "%s: can't write file %s\n", progname, outfile_name);
     Rprintf( "%s: data access error (%s.%s)\n",
     Rprintf( "%s: input format error: %s", progname, line);
     Rprintf( "%s: source regions of alignment must be in ascending order\n", progname);
     Rprintf( "%s:\n\t", msg);
     Rprintf( "%s:dropcorpus(): cl is not in list of loaded corpora\n", __FILE__);
     Rprintf( "%s=%d  ", l->name, get_reftab(rt, l->ref, cpos));
     Rprintf( "'%s' ", strlist[i]);
     Rprintf( "???");
     Rprintf( "Aborted.\n");
     Rprintf( "Accessing position %d of %s via compressed item sequence\n",
     Rprintf( "After total simulation:\n");
     Rprintf( "Attribute %s.%s added twice to print list (ignored)\n",
     Rprintf( "Attribute %s.%s doesn't exist. Aborted.\n", 
     Rprintf( "Attribute %s.%s doesn't exist. Aborted.\n", corpus_id, attr_name);
     Rprintf( "BUFFER OVERFLOW, input line #%d is too long:\n>> %s", input_line, buf);
     Rprintf( "Binary search in get_alignment_item failed\n");
     Rprintf( "Binary search in get_extended_alignment_item failed\n");
     Rprintf( "Binary search in get_surrounding_positions failed\n");
     Rprintf( "CL: Out of memory. (killed)\n");
     Rprintf( "CL: Regex Execute Error no. %d (see `man pcreapi` for error codes)\n", result);
     Rprintf( "CL: [cl_realloc(block at %p to %ld bytes)]\n", block, bytes);
     Rprintf( "CL: calling pcre_study failed with message...\n   %s\n", errstring_for_pcre);
     Rprintf( "CL: cl_regopt_jumptable for Boyer-Moore search is\n");
     Rprintf( "CL: enabling PCRE's UTF8 mode for regex %s\n", anchored_regex);
     Rprintf( "CL: major error, invalid UTF8 string passed to cl_string_canonical...\n");
     Rprintf( "CL: tables inconsistent for #%d -> #%d\n", i, maptable[i]);
     Rprintf( "CQi READ BOOL[%d]\n", len);
     Rprintf( "CQi READ BYTE[%d]\n", len);
     Rprintf( "CQi READ INT[%d]\n", len);
     Rprintf( "CQi READ STRING[%d]\n", len);
     Rprintf( "CQi RECV BYTE[%d]\n", bytes);
     Rprintf( "CQi: AttHash: attribute '%s' found in hash.\n", name);
     Rprintf( "CQi: AttHash: attribute '%s' found, wrong attribute type.\n", name);
     Rprintf( "CQi: AttHash: attribute '%s' not found, trying to open ...\n", name);
     Rprintf( "CQi: Connection established. Looking up client's name.\n");
     Rprintf( "Can't access corpus %s, keep previous corpus\n",
     Rprintf( "Can't calculate complement for non-initial matchlist.\n");
     Rprintf( "Can't calculate complement with NULL eval env\n");
     Rprintf( "Can't calculate complement with NULL query_corpus.\n");
     Rprintf( "Can't open batch file\n");
     Rprintf( "Can't open output file <%s>.", output_file);
     Rprintf( "Can't write debug output to file %s. Aborted.", debug_fn);
     Rprintf( "Complement: can't access current corpus.\n");
     Rprintf( "Complement: can't find %s attribute of current corpus\n",
     Rprintf( "Complement: can't get attribute size\n");
     Rprintf( "Computation of huffman codes needs the CORPUS component\n");
     Rprintf( "Computation of huffman codes needs the FREQS component.\n"
     Rprintf( "Computation of huffman codes needs the LEXIDX component\n");
     Rprintf( "Computation of huffman codes needs the LEXION component\n");
     Rprintf( "Corpus %s not found in registry %s . Aborted.\n",
     Rprintf( "ERROR reading file %s. Aborted.\n", huf_path);
     Rprintf( "ERROR. Aborted.\n");
     Rprintf( "ERROR. Can't access corpus %s !\n", argv[i]);
     Rprintf( "ERROR: Can't select default attribute in attribute list\n");
     Rprintf( "ERROR: wrong token (id=%d) at cpos %d (correct id=%d). Aborted.\n",
     Rprintf( "Error: Can't find corpus <%s>!\n", corpus_name);
     Rprintf( "Error: Magic number incorrect in subcorpus file!\n");
     Rprintf( "Error: You have to specify source corpus (-C <corpus>) for -a switch.\n");
     Rprintf( "Error: can't compile regex /%s/\n", regex);
     Rprintf( "Error: can't load attribute %s.%s\n", corpname, frequency_att);
     Rprintf( "Error: non-integer offset in key '%s'.\n", key);
     Rprintf( "Error: s-attribute %s.%s has no annotations (aborted)\n", corpname, buf);
     Rprintf( "Error: s-attribute %s.%s is empty (aborted)\n", corpname, buf);
     Rprintf( "Evaluating label %s = %d\n", label->name, referenced_position);
     Rprintf( "FORMAT ERROR on line #%d:\n>> %s", input_line, buf);
     Rprintf( "Fatal Error: Variable space out of memory.\n");
     Rprintf( "Illegal component name: ``%s''\n", component);
     Rprintf( "Illegal field type %d\n", ft);
     Rprintf( "Illegal option. Try \"%s -h\" for more information.\n", progname);
     Rprintf( "Index compression requires the REVCIDX component\n");
     Rprintf( "Index compression requires the REVCORP component\n");
     Rprintf( "Internal Error: Illegal state %d/component ID %d ???\n", state, cid);
     Rprintf( "Invalid option. Type '%s -h' for more information.\n",
     Rprintf( "Invalid range [%d, %d] (inversion). Aborted.\n", start_cpos, end_cpos);
     Rprintf( "Last region was [*, %d]; current is [%d, %d].\n", mark, f1, l1);
     Rprintf( "List of input files:\n");
     Rprintf( "MISSING ANNOTATION on line #%d:\n>> %s", input_line, buf);
     Rprintf( "Need at least one p-attribute (-P flag). Aborted.\n");
     Rprintf( "Overlapping or unsorted ranges: [?, %d] and [%d, %d]. Aborted.\n",
     Rprintf( "Pass #%-3d (%6.2f%c complete)\n", pass, perc, '%');
     Rprintf( "Problems while free'ing environment %d\n", i);
     Rprintf( "RANGE INCONSISTENCY on line #%d:\n>> %s(end of previous region was %d)\n", input_line, buf, new_satt.last_cpos);
     Rprintf( "RDAT:\t");
     Rprintf( "Read error while reading in data from subcorpus file\n");
     Rprintf( "Reading from standard input.\n");
     Rprintf( "Sorry, dynamic attributes are not implemented. Aborting.\n");
     Rprintf( "Subcorpus %s not accessible (can't open %s for reading)\n",
     Rprintf( "Syntax error in %s, exiting\n", query_string);
     Rprintf( "Syntax error in regex part of key '%s' (invalid flags).\n", key);
     Rprintf( "Syntax error in regex part of key '%s'.\n", key);
     Rprintf( "Too many arguments. Try \"%s -h\" for more information.\n",
     Rprintf( "UNKNOWN COMMAND. Type 'h' for list of commands.\n");
     Rprintf( "USER:\t");
     Rprintf( "Unknown flag: %s\n", argv[cnt]);
     Rprintf( "Unknown pattern type in print_pattern: %d\n", 
     Rprintf( "Validating ... %s\n", value);
     Rprintf( "WARNING  Directory: %s/ \n", attr->any.path);
     Rprintf( "WARNING  Perhaps you misspelt the directory name in the registry file?\n");
     Rprintf( "WARNING Macro %s(%d) redefined\n", name, args);
     Rprintf( "WARNING. I cannot find the data directory of the '%s' attribute.\n",
     Rprintf( "Warning: can't encode %d in %d bits\n", 
     Rprintf( "Warning: could not reach EOF of temporary file!\n");
     Rprintf( "Warning: no registry directory for %s\n",
     Rprintf( "Warning: output range #%d..#%d is empty. No output.\n", first_token, last);
     Rprintf( "Warning: range [%d, %d] is too small for selected data (skipped).\n",
     Rprintf( "Warning: recursion and element attribute specificiers are ignored for null attributes (-0 %s).'n", name);
     Rprintf( "Warning: s-attribute %s.%s used with both -S and -V !\n",
     Rprintf( "[%d, %d]", start, end);
     Rprintf( "[grown to %d buckets  @ fill rate = %3.1f (%d/%d)]\n",
     Rprintf( "[lexhash autogrow: (perf = %3.1f  @ fill rate = %3.1f (%d/%d)]\n",
     Rprintf( "[remember that options go before the corpus name, and attribute declarations after it!]\n");
     Rprintf( "\n");
     Rprintf( "\t%d/%s", 
     Rprintf( "\t%s\t%s(flags: %d)  ->  RefTab[%d]\n",
     Rprintf( "after final reducing\n");
     Rprintf( "attributes:component_full_name(): Warning:\n"
     Rprintf( "attributes:create_component(): Unknown cid: %d\n", cid);
     Rprintf( "attributes:create_component(): Warning:\n"
     Rprintf( "attributes:ensure_component(): Warning:\n"
     Rprintf( "cannot open output file %s\n", fname);
     Rprintf( "cl_new_corpus: can't locate <%s> in %s\n", registry_name, registry_dir);
     Rprintf( "concordance.o/compose_kwic_line: lcontext attribute pointer is NULL\n");
     Rprintf( "concordance.o/compose_kwic_line: rcontext attribute pointer is NULL\n");
     Rprintf( "get_matched_corpus_positions: */+ optimization\n");
     Rprintf( "mmapfile()<storage.c>: Can't create file %s ...\n\tReason: ", 
     Rprintf( "mmapfile()<storage.c>: Can't fstat() file %s ... \n\tReason: ", 
     Rprintf( "mmapfile()<storage.c>: Can't open file %s ... \n\tReason: ", 
     Rprintf( "ok.\n");
     Rprintf( "p-attribute %s.%s not defined. Aborted.\n",
     Rprintf( "storage:mallocfile():\n  can't open %s -- ", filename);
     Rprintf( "storage:mallocfile():\n  can't open/create %s for writing -- ", filename);
     Rprintf( "storage:mallocfile():\n  can't stat %s -- ", filename);
     Rprintf( "storage:mfree():\n"
     Rprintf( "storage:write_file_from_blob():\n"
     Rprintf("ERROR: fcount1[%d]=%d r->w2f1[%d]-r->w2f1[%d]=%ld w=``%s''\n",
     Rprintf("ERROR: fcount2[%d]=%d r->w2f2[%d]-r->w2f2[%d]=%ld w=``%s''\n",
     Rprintf( "%d\n", i);
     Rprintf( "<P><EM>Query text:</EM> <BR>\n<BLOCKQUOTE><CODE>\n%s; %s\n</CODE></BLOCKQUOTE>\n",
     Rprintf( "\\hline\n");
      fputs(latex_convert_string(Group_id2str(group, source_id, 0)), fd);
      fputs(outstr, stream);
      fputs(pdr->AfterLine, stream);
      fputs(pdr->BeforeLine, stream);
      html_puts(fd, Group_id2str(group, source_id, 0), SUBST_ALL);
      if ((cqp_status != 0) && exit_on_parse_errors)
      if (0 >Rprintf( "%s%c", annot, 0)) {
      if (EOF == fputs(token, wattrs[fc].lex_fd)) {
      if (ai->status)Rprintf( "  * "); else fprintf(fd, "    ");
      if (fflush(stream->fd) == 0)
     Rprintf(get_typeface_escape('n')); /* work around 'bug' in less which may not switch off display attributes when user exits */
      Rprintf("%d", '\n');
      Rprintf("%d", '\t');
      sgml_puts(fd, Group_id2str(group, source_id, 0), SUBST_ALL);
      Rvprintf( format, ap);
    Rprintf( "%-28s  %-28s\t%6d\n",
    --help) echo "$usage"; exit 0;;
    --version) echo "$0 $scriptversion"; exit 0;;
    /*      Rprintf( "Cannot determine ID range of PA %s\n", */
    /*      Rprintf( "Cannot determine size of PA %s\n", */
    /*      Rprintf( "Composed dynamic call: \"%s\"\n", call); */
    /*      Rprintf( "Frequency %d of ID %d illegal (PA %s)\n", */
    /*      Rprintf( "ID %d out of range of PA %s\n", */
    /*Rprintf( "Couldn't install SIG_IGN for SIGPIPE signal\n"); */
    /* this is the listening 'parent', which exits immediately */
    <tr><td class="paramname">error_code</td><td>Value to be returned by the program when it exits. </td></tr>
    <tr><td class="paramname">error_level</td><td>The exit code that is returned to the OS. </td></tr>
    <tr><td class="paramname">exit_code</td><td>Value to be returned by the program when it exits. </td></tr>
    <tr><td class="paramname">exit_on_parse_errors</td><td>Boolean: should CQP exit on parse errors? </td></tr>
    <tr><td class="paramname">format</td><td>Format string (and ...) are passed as arguments to vfprintf(). </td></tr>
    TTYputs((CHAR *)Prompt);
    TTYputs((CHAR *)bol);
    TTYputs((EL_CONST CHAR *)Prompt);
    TTYputs((EL_CONST CHAR *)newline);
    TTYputs(bol);
    echo "Error: unknown option \$1"; exit 1;;
    exit 1
    rcqp_receive_error(0);
    rcqp_receive_error(1);
    rcqp_receive_error(1); /* hard way! */
    rcqp_receive_error(2);
    rcqp_flush();
    rcqp_flush();
    fprintf(
   Rprintf( " res=%5d CL [%3d/%3d] #sc %4d "
   Rprintf( "%8d:  Read r=%5d [%3d/%3d]  #sc=%4d, ",
   Rprintf( "final r=%d\tgap=%d\n", 
   Rprintf( " & %s & %d \\\\\n", 
   Rprintf( "%d %d\n", get_group_id(group, i, 0), get_group_id(group, i, 1)); /* (source ID, target ID) */
   Rprintf( "%s    <none>\n", header);
   Rprintf( "<TD>");
   Rprintf( "<TD>%d</TR>\n", count);
   Rprintf( "<TR><TD>");
   Rprintf( "Charset: ");
   Rprintf( "Properties:\n");
   Rprintf( "Size:    %d\n", cl->mother_size);
   Rprintf( "\n");
   Rprintf( "Allocated heap with %d cells for %d items\n\n",
   Rprintf( "Compressed code len: %10ld bits, %10ld (+1) bytes\n\n\n",
   Rprintf( "Maximal code length: %3d\n", hc->max_codelen);
   Rprintf( "Minimal code length: %3d\n", hc->min_codelen);
   Rprintf( "Node %d (p: %d, f: %d)\n",
   Rprintf( "\n");
   Rprintf( "\n");
   Rprintf( "ATTRIBUTE %s\n", wattrs[i].name);
   Rprintf(
   Rprintf( "                                                            \r");
   Rprintf( "       Please contact the CWB development team for assistance.\n");
   Rprintf( "       [ ServerLog [on], ServerDebug, Snoop (log all network traffic)   ]\n");
   Rprintf( "      (possibly a syntax error in key '%s')\n", key);
   Rprintf( "    -1           single client server (exits after 1 connection)\n");
   Rprintf( "    -C           enable ANSI colours (experimental)\n");
   Rprintf( "    -E variable  execute query in $(<variable>)\n");
   Rprintf( "    -L           accept connections from localhost only (loopback)\n");
   Rprintf( "    -L num       show <num> chars to the left of match\n");
   Rprintf( "    -P  port     listen on port #<port> [default=CQI_PORT]\n");
   Rprintf( "    -P pager     use program <pager> to display query results\n");
   Rprintf( "    -R num       show <num> chars to the right of match\n");
   Rprintf( "    -W num       show <num> chars to the left & right of match\n");
   Rprintf( "    -c           child process mode\n");
   Rprintf( "    -e           enable input line editing\n");
   Rprintf( "    -f filename  execute commands from file (batch mode)\n");
   Rprintf( "    -i           print matching ranges only (binary output)\n");
   Rprintf( "    -p           turn pager off\n");
   Rprintf( "    -q           fork() and quit before accepting connections\n");
   Rprintf( "    -s           auto subquery mode\n");
   Rprintf( "  ");
   Rprintf( "%5d/%s with %d members: \n", 
   Rprintf( "%c", character);
   Rprintf( "%d error(s)\n", ERRORS);
   Rprintf( "%s ", default_config[i]);
   Rprintf( "%s (at line %d)\n", msg, line_no);
   Rprintf( "%s(at line %d)\n", msg, line_no);
   Rprintf( "%s, line %d: Illegal bf_id\n", __FILE__, __LINE__);
   Rprintf( "%s: %s not in .align format\n", progname, align_name);
   Rprintf( "%s: %s\n", cl_error_string(cl_errno), message);
   Rprintf( "%s: -d and -D flags cannot be used at the same time\n", progname);
   Rprintf( "%s: Can't access s-attribute <%s.%s>\n",
   Rprintf( "%s: Corpus <%s> not registered in %s\n",
   Rprintf( "%s: can't open corpus %s\n", progname, corpus1_name);
   Rprintf( "%s: can't open corpus %s\n", progname, corpus2_name);
   Rprintf( "%s: can't open p-attribute %s.%s\n",
   Rprintf( "%s: can't open p-attribute %s.%s\n", progname, corpus1_name, word_name);
   Rprintf( "%s: can't open p-attribute %s.%s\n", progname, corpus2_name, word_name);
   Rprintf( "%s: can't open p-attribute %s.word\n", progname, corpus1_name);
   Rprintf( "%s: can't open p-attribute %s.word\n", progname, corpus2_name);
   Rprintf( "%s: can't open s-attribute %s.%s\n",
   Rprintf( "%s: can't write file %s\n", progname, alx_name);
   Rprintf( "%s: data access error (%s.%s)\n",
   Rprintf( "%s: data access error (%s.word)\n", progname, corpus1_name);
   Rprintf( "%s: data access error (%s.word)\n", progname, corpus2_name);
   Rprintf( "%s: either -d or -D must be specified\n", progname);
   Rprintf( "%s: format error in line\n\t%s", progname, line);
   Rprintf( "%s:\n  Warning: additional arguments in command ignored:",
   Rprintf( "%s:dropcorpus(): cl is not in list of loaded corpora (list empty)\n", __FILE__);
   Rprintf( "%s:duplicate_corpus(): WARNING: Called with NULL corpus\n",
   Rprintf( "%s\n", cl_error_string(cl_errno));
   Rprintf( "%s]     \r", message);
   Rprintf( "** Aborting evaluation ... (press Ctrl-C again to exit CQP)\n");
   Rprintf( "*** IGNORED ***\n");
   Rprintf( "+ Query Buffer is empty.\n");
   Rprintf( "+ Query Buffer overflow.\n");
   Rprintf( "??? Unknown application ???\n");
   Rprintf( "ATT: %s %s\n", flag_SV, name);
   Rprintf( "Activation prohibited\n");
   Rprintf( "Attribute %s.%s does not exist. Aborted.\n",
   Rprintf( "CL ERROR: regex optimiser did not accept '%s' although it should have!\n", haystack);
   Rprintf( "CL: Error, unrecognised CorpusCharset in cl_string_validate_encoding.\n");
   Rprintf( "CL: Out of memory. (killed)\n");
   Rprintf( "CL: Regex Compile Error: %s\n", cl_regex_error);
   Rprintf( "CL: Regex compiled successfully using PCRE library\n");
   Rprintf( "CL: [cl_calloc(%ld*%ld bytes)]\n", nr_of_elements, element_size);
   Rprintf( "CL: [cl_malloc(%ld)]\n", bytes);
   Rprintf( "CL: [cl_strdup(addr=%p, len=%ld)]\n", string, strlen(string));
   Rprintf( "CL: calling pcre_study produced useful information...\n");
   Rprintf( "CL: cl_regopt_analyse('%s')\n", regex);
   Rprintf( "CL: major error, cl_string_maptable called with invalid charset (UTF8).\n"
   Rprintf( "CL: regexp optimiser avoided calling regex engine for %d candidates out of %d strings\n"
   Rprintf( "CL: using %d grain(s) for optimised regex matching\n", rx->grains);
   Rprintf( "CQP will continue as normal without it...\n");
   Rprintf( "CQP: too many nested files (%d)\n", cqp_file_p);
   Rprintf( "CQPserver: ERROR Connection failed.\n");
   Rprintf( "CQPserver: ERROR Couldn't initialise CQP engine.\n");
   Rprintf( "CQPserver: send_cl_error() called with cderrno == CDA_OK\n");
   Rprintf( "CQPserver: send_cl_error() unknown value in cderrno\n");
   Rprintf( "CQi FLUSH\n");
   Rprintf( "CQi READ CHAR[] '%s'\n", s);
   Rprintf( "CQi READ INT    %08X  [= %d]\n", n, n);
   Rprintf( "CQi READ WORD   %04X      [= %d]\n", n, n);
   Rprintf( "CQi RECV BYTE 0x%02X\n", b);
   Rprintf( "CQi SEND BYTE   %02X        [= %d]\n", n, n);
   Rprintf( "CQi SEND CHAR[] '%s'\n", str);
   Rprintf( "CQi SEND INT    %08X  [= %d]\n", n, n);
   Rprintf( "CQi SEND WORD   %04X      [= %d]\n", n, n);
   Rprintf( "CQi: ** new CQPserver created, initiating CQi session\n");
   Rprintf( "CQi: CL error, returning 0x%04X\n", cmd);
   Rprintf( "CQi: CQI_CL_ALG2CPOS('%s', %d)\n", a, alg);
   Rprintf( "CQi: CQI_CL_ATTRIBUTE_SIZE('%s')\n", a);
   Rprintf( "CQi: CQI_CL_CPOS2ALG('%s', [", a);
   Rprintf( "CQi: CQI_CL_CPOS2ID('%s', [", a);
   Rprintf( "CQi: CQI_CL_CPOS2LBOUND('%s', [", a);
   Rprintf( "CQi: CQI_CL_CPOS2RBOUND('%s', [", a);
   Rprintf( "CQi: CQI_CL_CPOS2STR('%s', [", a);
   Rprintf( "CQi: CQI_CL_CPOS2STRUC('%s', [", a);
   Rprintf( "CQi: CQI_CL_DROP_ATTRIBUTE()  --  not implemented\n");
   Rprintf( "CQi: CQI_CL_ID2CPOS('%s', %d)\n", a, id);
   Rprintf( "CQi: CQI_CL_ID2FREQ('%s', [", a);
   Rprintf( "CQi: CQI_CL_ID2STR('%s', [", a);
   Rprintf( "CQi: CQI_CL_IDLIST2CPOS('%s', [", a);
   Rprintf( "CQi: CQI_CL_LEXICON_SIZE('%s')\n", a);
   Rprintf( "CQi: CQI_CL_REGEX2ID('%s', '%s')\n", a, regex);
   Rprintf( "CQi: CQI_CL_STR2ID('%s', [", a);
   Rprintf( "CQi: CQI_CL_STRUC2CPOS('%s', %d)\n", a, struc);
   Rprintf( "CQi: CQI_CL_STRUC2STR('%s', [", a);
   Rprintf( "CQi: CQI_CORPUS_%s_ATTRIBUTES('%s')\n", typename, c);
   Rprintf( "CQi: CQI_CORPUS_CHARSET('%s')\n", c);
   Rprintf( "CQi: CQI_CORPUS_FULL_NAME('%s')\n", c);
   Rprintf( "CQi: CQI_CORPUS_LIST_CORPORA()\n");
   Rprintf( "CQi: CQI_CORPUS_PROPERTIES('%s')\n", c);
   Rprintf( "CQi: CQI_CORPUS_STRUCTURAL_ATTRIBUTE_HAS_VALUES('%s')\n", a);
   Rprintf( "CQi: CQI_CQP_DROP_SUBCORPUS('%s')\n", subcorpus);
   Rprintf( "CQi: CQI_CQP_DUMP_SUBCORPUS('%s', %s, %d, %d)\n", 
   Rprintf( "CQi: CQI_CQP_FDIST_1('%s', %d, %s, %s)\n", 
   Rprintf( "CQi: CQI_CQP_FDIST_2('%s', %d, %s, %s, %s, %s)\n", 
   Rprintf( "CQi: CQI_CQP_LIST_SUBCORPORA(%s)\n", corpus);
   Rprintf( "CQi: CQI_CQP_QUERY('%s', '%s', '%s')\n", mother, child, query);
   Rprintf( "CQi: CQI_CQP_SUBCORPUS_HAS_FIELD('%s', %s)\n", 
   Rprintf( "CQi: CQI_CQP_SUBCORPUS_SIZE('%s')\n", subcorpus);
   Rprintf( "CQi: Opening socket and binding to port %d\n", port);
   Rprintf( "CQi: cqi_activate_corpus('%s');\n", name);
   Rprintf( "CQi: creating attribute hash (size = %d)\n", ATTHASHSIZE);
   Rprintf( "CQi: waiting for command\n");
   Rprintf( "Can't initialize CQP\n");
   Rprintf( "Can't load corpus names for type %d\n", ct);
   Rprintf( "Can't open %s for writing", revcidx->path);
   Rprintf( "Can't open %s, can't create freqs component\n", lexidx->path);
   Rprintf( "Can't open %s, can't create lexsrt component\n", lexidx->path);
   Rprintf( "Can't open input file <%s>.", input_file);
   Rprintf( "Can't remove temporary file %s -- \n\tI will continue, "
   Rprintf( "Can't set current corpus to default corpus %s, exiting.\n",
   Rprintf( "Comparing [%d,%d](%+d) with [%d,%d](%+d)\n",
   Rprintf( "Corpus %s not found in registry %s . Aborted.\n",
   Rprintf( "Corpus %s not found in registry %s . Aborted.\n", 
   Rprintf( "Creating %s\n", cid_name(cid));
   Rprintf( "Data size inconsistency: expected=%d, read=%d, written=%d.\n", datasize, cpos, ints_written);
   Rprintf( "ERROR: 'word' attribute is missing. Aborted.\n");
   Rprintf( "ERROR: can't access lexicon of source corpus\n");
   Rprintf( "ERROR: can't access lexicon of target corpus\n");
   Rprintf( "ERROR: can't create file %s\n", data_fname);
   Rprintf( "ERROR: can't create file %s\n", index_fname);
   Rprintf( "ERROR: can't open file %s. Aborted.\n", huf_path);
   Rprintf( "ERROR: can't open file %s. Aborted.\n", sync_path);
   Rprintf( "ERROR: can't open file %s\n", data_fname);
   Rprintf( "ERROR: can't open file %s\n", index_fname);
   Rprintf( "ERROR: reading %s failed. Aborted.\n",  hcd_path);
   Rprintf( "ERROR: wrong corpus size (%d tokens) in %s (correct size: %d)\n",
   Rprintf( "ERROR\n");
   Rprintf( "Environment %d not occupied\n", thisenv);
   Rprintf( "Environment %d not used\n", thisenv);
   Rprintf( "Error #5 in variable logic. Please contact developer.\n");
   Rprintf( "Error: Huffman codes too long (%d bits, current maximum is %d bits).\n", hc->max_codelen, MAXCODELEN-1);
   Rprintf( "Error: can't find corpus %s (in registry %s)\n", corpname, (reg_dir) ? reg_dir : cl_standard_registry());
   Rprintf( "Error: can't load attribute %s.%s\n", corpname, "word");
   Rprintf( "Error: can't open attribute %s.%s\n", corpname, buf);
   Rprintf( "Error: either -S or -V flag must be specified.\n\n");
   Rprintf( "Error: extra arguments.\n\n");
   Rprintf( "Error: option -n can only be used if s-attribute has annotated values\n");
   Rprintf( "Error: options -n and -v cannot be combined (would print nothing)\n");
   Rprintf( "Illegal index in print_pattern: %d\n", index);
   Rprintf( "Illegal offset %d in clear_bit\n", element);
   Rprintf( "Illegal offset %d in get_bit\n", element);
   Rprintf( "Illegal offset %d in set_bit\n", element);
   Rprintf( "Illegal offset %d in toggle_bit\n", element);
   Rprintf( "Internal error. Aborted.\n");
   Rprintf( "Internal error: unknown typeface '%c'.\n", typeface);
   Rprintf( "Keeping temporary file %s -- delete manually\n",
   Rprintf( "MACRO STACK TRACE:\n");
   Rprintf( "Macro hash statistics:\n");
   Rprintf( "Macro hash was not initialised.\n");
   Rprintf( "Missing argument, try \"%s -h\" for more information.\n", progname);
   Rprintf( "Missing argument. Try \"%s -h\" for more information.\n", progname);
   Rprintf( "No corpus specified. Try \"%s -h\" for more information.\n",
   Rprintf( "No more environments for evaluation (max %d exceeded)\n",
   Rprintf( "Operation was %d, ranges from %d to %d\n", operation, RUnion, RReduce);
   Rprintf( "Predefined function %s got %d args, takes %d (mismatch)\n",
   Rprintf( "Problem: No output generated -- no items?\n");
   Rprintf( "Query buffer: >>%s<<\n", QueryBuffer);
   Rprintf( "Regex Compile Error: %s\n", cl_regex_error);
   Rprintf( "Running grouping sort: \n\t%s\n",
   Rprintf( "Scan complete.                          \n");
   Rprintf( "Scanning corpus %s for %d-tuples ... \n", corpname, Hash.N);
   Rprintf( "Size = %d INTs,  Buffer Size = %ld INTs\n", datasize, bufsize);
   Rprintf( "Synchronizing to end of line ... \n");
   Rprintf( "Synchronizing until next ';'...\n");
   Rprintf( "Too many attributes (maximum is %d). Aborted.\n", MAX_ATTRS);
   Rprintf( "Type \"%s -h\" for more information.\n", progname);
   Rprintf( "Unknown side-effect #%d invoked by option %s.\n", 
   Rprintf( "Usage error: %s\n", msg);
   Rprintf( "Usage: %s [options] '<query>'\n", progname);
   Rprintf( "Usage: %s [options] [<user>:<password> ...]\n", progname);
   Rprintf( "Usage: %s [options]\n", progname);
   Rprintf( "User ``%s'' is not authorized to access corpus ``%s''\n",
   Rprintf( "WARNING: '%s' isn't a valid IP address (ignored)\n", ipaddr);
   Rprintf( "WARNING: query lock violation attempted\n");
   Rprintf( "WARNING: user '%s' already in list (ignored)\n", user);
   Rprintf( "Warning: %d annotation values dropped for -S attribute '%s'.\n", S_annotations_dropped, new_satt.name);
   Rprintf( "Warning: No input files found in directory -F %s !!\n", dir);
   Rprintf( "We're sorry, CQP's Colourful Mode is not available under Windows.\n");
   Rprintf( "Writing registry file %s ...\n", registry_file);
   Rprintf( "You MUST specify a file with the -f flag! Program aborts.\n");
   Rprintf( "[");
   Rprintf( "[location of error: ");
   Rprintf( "\n  (perhaps you forgot -P, -p, -S, or -V before an attribute name?)\n");
   Rprintf( "\n");
   Rprintf( "\nCreating REVCORP component as '%s' ... \n", revcorp->path);
   Rprintf( "\t%-6d buckets hold 1 macro\n", stat[1]);
   Rprintf( "\t%-6d buckets hold 2 macros\n", stat[2]);
   Rprintf( "\t%-6d buckets hold 3 or more macros\n", stat[3]);
   Rprintf( "\t%-6d empty buckets\n", stat[0]);
   Rprintf( "])\n");
   Rprintf( "]\n");
   Rprintf( "attributes:declare_component(): Warning:\n"
   Rprintf( "attributes:declare_component(): \n"
   Rprintf( "attributes:declare_default_components(): \n"
   Rprintf( "attributes:drop_attribute(): called with NULL corpus\n");
   Rprintf( "attributes:ensure_component(): Warning:\n"
   Rprintf( "attributes:find_attribute(): called with NULL corpus\n");
   Rprintf( "attributes:load_component(): Warning:\n"
   Rprintf( "attributes:setup_attribute(): Warning: \n"
   Rprintf( "bitio.o/BFreadWord: nbits (%d) not in legal bounds\n", nbits);
   Rprintf( "bitio.o/BFwriteWord: nbits (%d) not in legal bounds\n", nbits);
   Rprintf( "calculate_ranges: undefined space type %d detected\n", spc.type);
   Rprintf( "cl_new_corpus: <%s> is not a valid corpus name\n", registry_name);
   Rprintf( "cl_set_debug_level(): non-existent level #%d (ignored)\n", level);
   Rprintf( "dup_reftab()<symtab.c>: Tried to dup() RefTab (%d entries) to RefTab of different size (%d entries)\n", rt1->size, rt2->size);
   Rprintf( "file %s, line #%d", current_input_file_name, input_line);
   Rprintf( "get_reftab()<symtab.c>: RefTab index #%d not in range 0 .. %d", index, rt->size - 1);
   Rprintf( "input line #%d", input_line);
   Rprintf( "line aft srev(): >>%s<<\n", line + index);
   Rprintf( "line bef srev(): >>%s<<\n", line + index);
   Rprintf( "makecomps:creat_freqs(): Couldn't open corpus %s\n", corpus_fn);
   Rprintf( "matched initial pattern for regex %s, %d matches\n",
   Rprintf( "matched initial wordform for non-regex %s, "
   Rprintf( "ml[%d] = [%d, %d]@%d\n",
   Rprintf( "ml[%d] = [%d,...]\n",
   Rprintf( "mmapfile()<storage.c>: Can't mmap() file %s ...\n"
   Rprintf( "mmapfile()<storage.c>: Mode '%s' is not supported ...\n", mode);
   Rprintf( "pass %d of %d: ", pass, total);
   Rprintf( "regex2dfa: Reached the %d error limit.\n",
   Rprintf( "storage:mallocfile():\n  mode %s is not supported\n", mode);
   Rprintf( "storage:mfree():\n"
   Rprintf( "storage:read_file_into_blob():\n"
   Rprintf( "storage:write_file_from_blob():\n"
   Rprintf( "wrong header: %s", line);
   Rprintf("Invalid usage of mmap when built with USE_WIN32_MMAP");
   Rprintf("mmap: could not determine filesize");
   Rprintf("unable to close file mapping handle\n");
   Rprintf( "-::-PROGRESS-::-\t%d\t%d\t%s\n", pass, total, message);
   Rprintf(
   Rprintf( "# Query: %s; %s\n", cl->query_corpus, cl->query_text);
   Rprintf( "%d %s", cd->left_width, 
   Rprintf( "%d %s", cd->right_width, 
   Rprintf( "%d characters", cd->left_width);
   Rprintf( "%d characters", cd->right_width);
   Rprintf( "%d tokens", cd->left_width);
   Rprintf( "%d tokens", cd->right_width);
   Rprintf( "%s%s-->%s:%s %s\n", 
   Rprintf( "-->%s: %s\n", attribute_name, line);
   Rprintf( "</TR>\n");
   Rprintf( "<HR><TABLE%s>\n",
   Rprintf( "<TR><TD colspan=4%s><EM><B><EM>--&gt;", 
   Rprintf( "\\begin{tabular}{%s}\n", latex_tab_format);
    fputs("</table>\n", stream);
    fputs("<HR><UL>\n", stream);
    fputs("<p>\n", stream);
    fputs(pdr->AfterLine, outfd);
    fputs(pdr->AfterLine, stream);
    fputs(pdr->BeforeConcordance, stream);
    fputs(pdr->BeforeLine, stream);
    fputs(s, fd);
    html_puts(fd, target_s, SUBST_ALL);
    html_puts(stream, "<P><B><EM>--&gt;", 0);
    if ((ix <= 0) && (iy <= 0)) break; /* exit point */
    if (EOF == fputs(line, output_fd)) {
    if (clrpage) TTYputs(clrpage);
    if (save_on_exit)
   Rprintf(">> "); rcqp_flush();
    Rprintf("%d", '\n');
    sgml_puts(fd, target_s, SUBST_ALL);
    Rvprintf( format, ap);
    while (ok && !feof(fd) && !exit_cqp) {
    { exit_cqp++; }
    {Rprintf("-::-EOL-::-\n"); rcqp_flush(); }
  # Trap to clean up those temp files at exit.
  (exit 0); exit
  /*  Rprintf( "  -R       reverse alignment (target -> source)\n"); */
  /*  Rprintf( "+ Resetting Query Buffer\n"); */
  /* ==================== finish and exit */
  /* connection terminated; clean up and exit */
  /*Rprintf( "Handle broken pipe signal\n"); */
  /* hebrew has a few more complexities */
  decode_cleanup(exit_code);
  exit 1
  exit 2
  rcqp_receive_error(0);
  rcqp_receive_error(0);                        /* that was easy, wasn't it? */
  rcqp_receive_error(1);
  rcqp_receive_error(2);
  rcqp_receive_error(error_code);
  rcqp_receive_error(error_level);
  exit_cqp = 0;
  rcqp_flush();
  for( ; n > 0 ; n++)                /* will exit on int overflow */
  for( ; n > 0 ; n++)           /* will exit on int overflow */
 Rprintf( "%d\t%d\t%d\t%d\t%d:%d\t%d\n",
 Rprintf( "</TABLE>\n");
 Rprintf( "</TABLE>\n</BODY>\n");
 Rprintf( "<BODY>\n<TABLE>\n");
 Rprintf( "<TABLE>\n");
 Rprintf( "\\begin{tabular}{llr}\n");
 Rprintf( "\\end{tabular}\n");
 Rprintf( "%s\t%s\t%s\t%s\n", corpus1_name, s_name, corpus2_name, s_name);
 Rprintf( "");
 Rprintf( "\nDump of %s (size %d)\n\n",
 Rprintf( "# Yours sincerely, the Encode tool.\n");
 Rprintf( "# corpus ID (must be lowercase in registry!)\n");
 Rprintf( "# corpus properties provide additional information about the corpus:\n");
 Rprintf( "# long descriptive name for the corpus\n");
 Rprintf( "# optional info file (displayed by \"info;\" command in CQP)\n");
 Rprintf( "# path to binary data files\n");
 Rprintf( "##:: charset  = \"%s\" # character encoding of corpus data\n", corpus_character_set);
 Rprintf( "##:: language = \"??\"     # insert ISO code for language (de, en, fr, ...)\n");
 Rprintf( "##\n## p-attributes (token annotations)\n##\n\n");
 Rprintf( "##\n## registry entry for corpus %s\n##\n\n", corpus_name);
 Rprintf( "##\n## s-attributes (structural markup)\n##\n\n");
 Rprintf( "HOME %s\n", path);
 Rprintf( "ID   %s\n", registry_id);
 Rprintf( "INFO %s\n\n", path);
 Rprintf( "NAME \"\"\n");
 Rprintf( "\n");
 Rprintf( "\n\n");
 Rprintf(
 Rprintf( "              (must exist in both source AND target corpus)\n");
 Rprintf( "              f2/(f1+f2) must be greater than threshold <t>]\n");
 Rprintf( "             [N-gram features are similar to orthographic cognates]\n");
 Rprintf( "             [format: <source word> SPC <target word>]\n");
 Rprintf( "             [to avoid false friends, frequency ratios f1/(f1+f2) and\n");
 Rprintf( "             pre-aligned; regions must appear in identical order!)\n");
 Rprintf( "            (compressed with gzip if <file> ends in '.gz')\n");
 Rprintf( "            (does not apply to constraint keys marked with '?')\n");
 Rprintf( "        ... | %s [options] -d <dir> [attribute declarations]\n\n", progname);
 Rprintf( "       (e.g. -S np:2+agr/+head)\n");
 Rprintf( "       (e.g., -S s:0+id+len stores XML tags like <s id=\"abc\" len=42> in\n");
 Rprintf( "       -V s:0+id+len)\n");
 Rprintf( "       / to relevant attribute name for format validation and normalisation\n");
 Rprintf( "       [ ALL (activate all modes except ParseOnly)                      ]\n");
 Rprintf( "       [ EvalDebug, InitialMatchlistDebug, DebugSimulation,             ]\n");
 Rprintf( "       [ ShowGConstraints, SymtabDebug, TreeDebug, CLDebug,             ]\n");
 Rprintf( "       [ ShowSymtab, ShowPatList, ShowEvaltree, ShowDFA, ShowCompDFA,   ]\n");
 Rprintf( "       [ VerboseParser, ParserDebug, ParseOnly, SearchDebug, MacroDebug ]\n");
 Rprintf( "       addition to auto-splitting into individual s-attributes (e.g. \n");
 Rprintf( "       attributes s, s_id and s_len)\n");
 Rprintf( "       flat region)\n");
 Rprintf( "       normalised\n");
 Rprintf( "       regions (highly recommended, otherwise every start tag will begin a new\n");
 Rprintf( "       s-attributes; the relevant attribute names are appended with + signs\n");
 Rprintf( "     * NB: cwb-check-input does NOT default to latin1, unlike cwb-encode!\n");
 Rprintf( "     * alias -t <file> is provided for backward compatibility\n");
 Rprintf( "     * annotations and values of XML tag attributes can be feature sets; append\n");
 Rprintf( "     * append / to mark as feature set => values will be validated and\n");
 Rprintf( "     * append :<n> for automatic renaming of nested regions, :0 to drop nested\n");
 Rprintf( "     * attribute-value pairs in XML start tags can be auto-split into separate\n");
 Rprintf( "     * files will be added to the corpus in alphabetical order (ASCII)\n");
 Rprintf( "     * gzipped files named *.gz will be decompressed automatically\n");
 Rprintf( "     * it is not possible to scan subdirectories recursively\n");
 Rprintf( "     * this option always has to be specified (use -d . for current directory)\n");
 Rprintf( "     * use -V to store original attribute-value pairs as single string in\n");
 Rprintf( "     * valid charsets: ascii ; latin1 to latin9 ; arabic, greek, hebrew ; utf8\n");
 Rprintf( "     * valid charsets: ascii ; latin1 to latin9 ; utf8\n");
 Rprintf( "    -D corpus    set default corpus to <corpus>\n");
 Rprintf( "    -I file      read <file> as init file\n");
 Rprintf( "    -M file      read macro definitions from <file>\n");
 Rprintf( "    -S           SIG_PIPE handler toggle\n");
 Rprintf( "    -b num       set hard boundary for kleene star to <num> tokens\n");
 Rprintf( "    -d mode      activate/deactivate debug mode, where <mode> is one of: \n");
 Rprintf( "    -h           help\n");
 Rprintf( "    -l dir       store/load subcorpora in <dir>\n");
 Rprintf( "    -m           disable macro expansion\n");
 Rprintf( "    -r dir       use <dir> as default registry\n");
 Rprintf( "    -v           version and copyright information\n");
 Rprintf( "    -x           insecure mode (when run SETUID)\n");
 Rprintf( "    [?]<att>[+<n>][[!]=/<regex>/[cd]]\n\n");
 Rprintf( "  ");
 Rprintf( "  -0        [with -F <file>] show non-existing strings with frequency 0\n");
 Rprintf( "  -0 <att>  declare null s-attribute <att> (discards tags)\n\n");
 Rprintf( "  -1:<w>     charcters shared by source and target region\n");
 Rprintf( "  -2:<w>     bigrams     ~    ~    ~     ~    ~      ~   \n");
 Rprintf( "  -3:<w>     trigrams    ~    ~    ~     ~    ~      ~   \n");
 Rprintf( "  -4:<w>     4-grams     ~    ~    ~     ~    ~      ~   \n");
 Rprintf( "  -A        compress all positional attributes\n");
 Rprintf( "  -A <att>  print alignment attribute <att>\n");
 Rprintf( "  -ALL      print all p-attributes and s-attributes\n");
 Rprintf( "  -B        check for leading/trailing blanks on input lines and p-atts\n");
 Rprintf( "  -B        strip leading/trailing blanks from (input lines & token annotations)\n");
 Rprintf( "  -B        strip leading/trailing blanks from annotations\n");
 Rprintf( "  -C        clean strings, replacing invalid bytes with '?' (not in UTF-8 mode)\n");
 Rprintf( "  -C        clean up data, i.e. accept only \"regular\" words\n");
 Rprintf( "  -C        compact output mode (suitable for cwb-encode)\n");
 Rprintf( "  -C       compatibility mode (creates .alg file)\n");
 Rprintf( "  -C <id>   work on corpus <id> (with -a option)\n");
 Rprintf( "  -C:<w>     size of alignment region (in characters)\n");
 Rprintf( "  -Cx       XML-compatible compact output (for \"cwb-encode -x ...\")\n");
 Rprintf( "  -D        debug mode (quiet, sorry, quite the opposite :-)\n");
 Rprintf( "  -D        debug mode\n");
 Rprintf( "  -D       write files to corpus data directory\n");
 Rprintf( "  -D <file> debug mode (write messages to <file>)\n");
 Rprintf( "  -F <att>  add up frequency values from p-attribute <att>\n");
 Rprintf( "  -F <dir>  read all files named *" DEFAULT_INFILE_EXTENSION
 Rprintf( "  -F <file> lookup strings read from <file> ('-' for stdin)\n");
 Rprintf( "  -H        concordance line ('horizontal') output mode\n");
 Rprintf( "  -L        Lisp output mode\n");
 Rprintf( "  -M        create list of regions in memory (resolving overlaps)\n");
 Rprintf( "  -M <size> limit memory usage to approx. <size> MBytes\n");
 Rprintf( "  -N        [with -F <file>] read lexicon IDs from <file>\n");
 Rprintf( "  -P <att>  compress attribute <att> [default: word]\n");
 Rprintf( "  -P <att>  declare additional p-attribute <att>\n");
 Rprintf( "  -P <att>  print p-attribute <att>\n");
 Rprintf( "  -P <att>  use p-attribute <att> [default: word]\n");
 Rprintf( "  -P <att>  work on attribute <att> [default: ALL attributes]\n");
 Rprintf( "  -P <p-att> display positional attribute <p-att> [word]\n");
 Rprintf( "  -P <p-att> use positional attribute <p-att> for alignment [word]\n");
 Rprintf( "  -R <file> read list of corpus ranges to scan from <file>\n");
 Rprintf( "  -R <rf>   create registry entry (named <rf>) listing all encoded attributes\n");
 Rprintf( "  -S        only show lexicon and corpus size\n");
 Rprintf( "  -S <att>  declare s-attribute <att> without annotations\n");
 Rprintf( "  -S <att>  generate s-attribute <att>\n");
 Rprintf( "  -S <att>  print s-attribute <att> (possibly including annotations)\n");
 Rprintf( "  -S <s-att> pre-alignment (corresponding regions of the s-attribute are\n");
 Rprintf( "  -S:<w>:<t> shared words, i.e. identical tokens in source/target corpus\n");
 Rprintf( "  -T        skip validation pass ('I trust you')\n");
 Rprintf( "  -U <str>  insert <str> for missing columns [default: \"%s\"]\n", undef_value);
 Rprintf( "  -V        validate index after creating it\n");
 Rprintf( "  -V <att>  declare s-attribute <att> with annotations\n");
 Rprintf( "  -V <att>  generate s-attribute <att> with annotations\n");
 Rprintf( "  -V <att>  show s-attribute annotation for each range in matchlist mode\n");
 Rprintf( "  -V <s-att> pre-alignment with ID matching (identical annotation strings)\n");
 Rprintf( "  -W         use alternative default width settings for wide terminal\n");
 Rprintf( "  -W:<w>:<f> list of translation equivalents (read from file <f>)\n");
 Rprintf( "  -X        XML output mode\n");
 Rprintf( "  -a        add to existing annotation (resolving overlaps, implies -M)\n");
 Rprintf( "  -b <n>    number of buckets in lexicon hash tables\n");
 Rprintf( "  -b <n>    use <n> hash buckets [default: 1,000,000]\n");
 Rprintf( "  -c        [with -p <rx>] ignore case\n");
 Rprintf( "  -c <att>  expand ranges to full <att> region (matchlist mode)\n\n");
 Rprintf( "  -c <charset> specify corpus character set (instead of the default ascii)\n");
 Rprintf( "  -c <charset> specify corpus character set (instead of the default latin1)\n");
 Rprintf( "  -c <comp> create component <comp> only\n");
 Rprintf( "  -d        [with -p <rx>] ignore diacritics\n");
 Rprintf( "  -d        debug mode (print messages on stderr)\n");
 Rprintf( "  -d        show details (about component files)\n");
 Rprintf( "  -d <dir>  directory for data files created by cwb-encode\n");
 Rprintf( "  -d <dir>  directory for output files\n");
 Rprintf( "  -d <dir> write data file(s) to directory <dir>\n");
 Rprintf( "  -e <n>    last token to print (at corpus position <n>)\n");
 Rprintf( "  -e <n>    stop scanning at corpus position <n>\n");
 Rprintf( "  -f        show frequency (number of occurrences)\n");
 Rprintf( "  -f <file> matchlist mode (input from <file>)\n");
 Rprintf( "  -f <file> read input from <file> [default is stdin; -f may be used repeatedly]\n");
 Rprintf( "  -f <file> read input from <file> [default: stdin]\n");
 Rprintf( "  -f <file> read input from <file>\n");
 Rprintf( "  -f <file> set output file prefix (creates <file>.crc and <file>.crx)\n");
 Rprintf( "  -f <file> set output file prefix (creates <file>.huf, ...)\n");
 Rprintf( "  -f <n>    include only items with frequency >= <n> in result table\n");
 Rprintf( "  -h         this help page\n\n");
 Rprintf( "  -h        show this help page\n\n");
 Rprintf( "  -h        this help page\n");
 Rprintf( "  -h        this help page\n\n");
 Rprintf( "  -h       this help page\n\n");
 Rprintf( "  -l        show length of annotation string\n");
 Rprintf( "  -m        treat annotations as feature set (or 'multi-value') attribute\n");
 Rprintf( "  -n        check for perfect nesting of XML elements\n");
 Rprintf( "  -n        show corpus position ('numbers')\n");
 Rprintf( "  -n        show internal lexicon ID\n");
 Rprintf( "  -o <file>  write alignment output to file <file>      [out.align]\n");
 Rprintf( "  -o <file> write frequency table to <file> [default"": standard output]\n");
 Rprintf( "  -o <file> write repaired output to <file>\n");
 Rprintf( "  -p        matchlist mode (input from stdin)\n");
 Rprintf( "  -p -      no default p-attribute (all must be declared with -P)\n");
 Rprintf( "  -p <att>  change name of default p-attribute from \"word\" to <att>\n");
 Rprintf( "  -p <rx>   show lexicon entries matching regexp <rx> only\n");
 Rprintf( "  -q        quiet (suppresses all warnings in either mode)\n");
 Rprintf( "  -q        quiet mode (no progress information on stderr)\n");
 Rprintf( "  -q        quiet mode (suppresses most warnings)\n");
 Rprintf( "  -q        silent mode ('be quiet')\n");
 Rprintf( "  -r <dir>  set registry directory <dir>\n");
 Rprintf( "  -r <dir>  set registry directory\n");
 Rprintf( "  -r <dir>  use registry directory <dir>\n");
 Rprintf( "  -r <reg>   use registry directory <reg>\n");
 Rprintf( "  -r <reg> use registry directory <reg>\n");
 Rprintf( "  -s        (with -m) check that format of set annotations is consistent\n");
 Rprintf( "  -s        check for empty lines in input \n");
 Rprintf( "  -s        print in (lexically) sorted order\n");
 Rprintf( "  -s        show statistics (attribute & lexicon size)\n");
 Rprintf( "  -s        skip empty lines in input data (recommended)\n");
 Rprintf( "  -s <n>     set column separator width to <n> [%d]\n", COL_SEP);
 Rprintf( "  -s <n>    first token to print (at corpus position <n>)\n");
 Rprintf( "  -s <n>    start scanning at corpus position <n>\n");
 Rprintf( "  -s <x>     set 2:2 alignment split factor to <x>      [1.2]\n");
 Rprintf( "  -v         verbose\n");
 Rprintf( "  -v        verbose (show warnings for fixable problems in repair mode)\n");
 Rprintf( "  -v        verbose mode (show progress messages while encoding)\n");
 Rprintf( "  -v        verbose mode (shows protocol) [may be repeated]\n");
 Rprintf( "  -v       verbose mode\n");
 Rprintf( "  -w        do extra checks for CQPweb compatibility \n");
 Rprintf( "  -w <n>     set display column width to <n>   [%d]\n", COL_WIDTH);
 Rprintf( "  -w <n>     use best path search beam of width <n>     [50]\n");
 Rprintf( "  -x        XML-aware (ignore <!.. and <?..)\n");
 Rprintf( "  -x        XML-aware (replace XML entities and ignore <!.. and <?..)\n");
 Rprintf( "  <f>  TAB  <key1-value>  TAB  <key2-value>  TAB  ... \n\n");
 Rprintf( "  <s-attrib>  s-attribute used as alignment grid\n");
 Rprintf( "  <source>    source corpus identifier\n");
 Rprintf( "  <target>    target corpus identifier\n");
 Rprintf( "  Character encoding - always checked.\n");
 Rprintf( "  Consistent number of p-attributes in each line - always checked.\n");
 Rprintf( "  Misplaced closing attribute on an XML line - always checked.\n");
 Rprintf( "  RET    show next aligned region\n");
 Rprintf( "  S-attribute (XML) perfect nesting - checked if -n is set.\n");
 Rprintf( "  Use of Windows-style linebreaks - always checked. (R)\n");
 Rprintf( "  Whitespace at start / end of line - checked if -B is set. (R)\n");
 Rprintf( "  [ <lexicon id> TAB ] [ <frequency> TAB ] [<length> TAB ] <string>\n\n");
 Rprintf( "  h      this list (help)\n");
 Rprintf( "  p <n>  print next <n> regions\n");
 Rprintf( "  q, x   exit %s\n", progname);
 Rprintf( "  s <n>  skip next <n> regions\n");
 Rprintf( "%s detected %d errors in %s\n\n", progname, errors_detected, input_file);
 Rprintf( "(R) = can be fixed when running in repair mode.\n");
 Rprintf( "(pairs of) corpus positions are read from stdin (or a file specified\n");
 Rprintf( "---------------------------------------- Mapping: \n");
 Rprintf( "------------------------------------------------- \n");
 Rprintf( "-s and -e options) is printed on NULL. In matchlist mode (-p or -f),\n");
 Rprintf( "Adds an alignment attribute to an existing CWB corpus\n");
 Rprintf( "Adds s-attributes with computed start and end points to a corpus\n");
 Rprintf( "Aligns two CWB-encoded corpora.\n");
 Rprintf( "All error messages go to STDERR.\n");
 Rprintf( "Attribute declarations:\n");
 Rprintf( "CQPserver: ''%s''\n", reason);
 Rprintf( "CQPserver: command 0x%04X not allowed in this context.\n", cmd);
 Rprintf( "CQPserver: internal error in %s()\n", function);
 Rprintf( "CQPserver: unknown CQi command 0x%04X.\n", cmd);
 Rprintf( "Compress the index of a positional attribute. Creates .crc and .crx files\n");
 Rprintf( "Compress the token sequence of a positional attribute. Creates .huf, .hcd,\n");
 Rprintf( "Computes the joint frequency distribution over <key1>, <key2>, ... .\n");
 Rprintf( "Configuration flags:\n");
 Rprintf( "Contents of SYMBOL TABLE:\n");
 Rprintf( "Creates a lexicon and index for each p-attribute of an encoded CWB corpus.\n");
 Rprintf( "Decodes CWB corpus as plain text (or in various other text formats).\n");
 Rprintf( "Default configuration:\n");
 Rprintf( "Displays alignment results in terminal. Aligned regions are\n");
 Rprintf( "ERROR %s() <server.c>\n", function);
 Rprintf( "ERROR ''%s''\n", cause);
 Rprintf( "ERROR CQi data recv failure in function\n");
 Rprintf( "ERROR CQi data send failure in function\n");
 Rprintf( "ERROR Internal error in function\n");
 Rprintf( "Each key specifier takes the form:\n\n");
 Rprintf( "Error writing to output file <%s>, program aborts.\n", output_file);
 Rprintf( "If an output file is specified, problems will be fixed if possible; if not\n");
 Rprintf( "If no output file is specified, all problems will be reported, unless -q\n");
 Rprintf( "In normal mode, the entire corpus (or a segment specified with the\n");
 Rprintf( "Label values:\n");
 Rprintf( "Matchlist (size: %d, %sinverted):\n",
 Rprintf( "NB: If you re-encode an existing corpus, be sure to delete all old data files,\n");
 Rprintf( "Name:  %s\n", map->mapping_name);
 Rprintf( "Note: it is entirely possible for the detection of one error on a line to block\n");
 Rprintf( "NrCls: %d\n", 
 Rprintf( "Options:\n");
 Rprintf( "Part of the IMS Open Corpus Workbench v" VERSION "\n\n");
 Rprintf( "Prints the lexicon (or part of it) of a positional attribute on NULL,\n");
 Rprintf( "REGISTRY ERROR (%s/%s): %s\n", cregin_path, cregin_name, message);
 Rprintf( "Reads verticalised text from an input file with -f option and checks its\n");
 Rprintf( "Reads verticalised text from stdin (or an input file with -f option) and \n");
 Rprintf( "See list of options for available output modes.\n");
 Rprintf( "The optional '?' sign marks a \"constraint\" key which will not be included\n");
 Rprintf( "The output is a table of the form:\n");
 Rprintf( "These two modes are, respectively, \"repair mode\" and \"check mode\". In\n");
 Rprintf( "Usage:  %s -f <file> [options] -d <dir> [attribute declarations]\n", progname);
 Rprintf( "Usage:  %s -f <file> [options]\n\n", progname);
 Rprintf( "Usage:  %s [flags] <corpus> [<corpus> ...] \n", progname);
 Rprintf( "Usage:  %s [options] (-S <att> | -V <att>)\n", progname);
 Rprintf( "Usage:  %s [options] <corpus> [<attribute> ...] \n", progname);
 Rprintf( "Usage:  %s [options] <corpus> [declarations]\n\n", progname);
 Rprintf( "Usage:  %s [options] <corpus>\n\n", progname);
 Rprintf( "Usage: %s [options] <alignment file>\n\n", progname);
 Rprintf( "Usage: %s [options] <alignment_file>\n\n", progname);
 Rprintf( "Usage: %s [options] <source> <target> <s-attrib> [<config>]\n", progname);
 Rprintf( "Usage: cwb-scan-corpus [options] <corpus> <key1> <key2> ... \n\n");
 Rprintf( "Valid: %s/%s\n", 
 Rprintf( "[%d] ", LINE);
 Rprintf( "[declarations] determine which attributes to display (-ALL for all attributes).\n\n");
 Rprintf( "[each flag defines a set of features with weight <w> per feature]\n");
 Rprintf( "\n");
 Rprintf( "\n\n");
 Rprintf( "and .huf.syn files, which replace the corresponding .corpus files. After\n");
 Rprintf( "compress them with cwb-huffcode and cwb-compress-rdx (or preferably use the\n");
 Rprintf( "converts it to the CWB binary format. Each TAB-separated column is encoded as a\n");
 Rprintf( "current directory (or any directory specified with -d). After encoding, use\n");
 Rprintf( "cwb-encode!\n");
 Rprintf( "cwb-make program from the CWB/Perl interface).\n\n");
 Rprintf( "cwb-makeall to create the required index files and frequency lists, then\n");
 Rprintf( "declared with -S (without annotations) or -V (with annotations) flags. In\n");
 Rprintf( "displayed side-by-side, one region at a time. The following\n");
 Rprintf( "either mode, when the program finishes, a count of errors will be reported.\n");
 Rprintf( "formatting. The following problems may be checked for, depending on what\n");
 Rprintf( "has been set.\n");
 Rprintf( "in particular the index and any compressed data files, before running\n");
 Rprintf( "in the resulting frequency distribution. Up to %d keys may be specified in total.\n\n", MAX_N);
 Rprintf( "interactive commands are available:\n\n");
 Rprintf( "lines. For each encoded attribute, one or more data files are created in the\n");
 Rprintf( "non-negative offset (number of tokens to the right), and <regex> an optional\n");
 Rprintf( "optionally with frequency information. The output line format is\n");
 Rprintf( "options have been set:\n");
 Rprintf( "possible, checking will be stopped. Problems that can be fixed will not be\n");
 Rprintf( "regex may be followed by 'c' (ignore case) and/or 'd' (ignore diacritics).\n");
 Rprintf( "regular expression that the key must match ('=') or not match ('!='). The\n");
 Rprintf( "reported, except if -v has been set.\n");
 Rprintf( "running this tool successfully, the .corpus files can be deleted.\n");
 Rprintf( "running this tool successfully, the latter files can be deleted.\n");
 Rprintf( "separate p-attribute. The first p-attribute is named \"word\" (unless changed\n");
 Rprintf( "the first (max 1000) elements of the matchlist (size: %d) are:\n",
 Rprintf( "the identification of other errors - so always run this program more than once.\n");
 Rprintf( "the input data, they must appear as opening and closing XML tags on separate\n");
 Rprintf( "where <att> is a positional or structural attribute, <n> an optional\n");
 Rprintf( "which replace the corresponding .corpus.rev and .corpus.rdx files. After\n");
 Rprintf( "with -f), and the corresponding tokens or ranges are displayed. The\n");
 Rprintf( "with -p), additional columns must be declared with -P flags. S-attributes can be\n");
 Rprintf(
 Rprintf( "%s: %s\n", msg, ctime(&now));
 Rprintf( "<leftContext size=%d base=\"%s\">\n",
 Rprintf( "<rightContext size=%d base=\"%s\">\n",
  fputs("</concordanceInfo>\n", stream);
  fputs("</td></tr>\n", stream);
  fputs("<tr><td nowrap><em>Left display context:</em></td><td nowrap>", stream);
  fputs("<tr><td nowrap><em>Right display context:</em></td><td nowrap>", stream);
  fputs("\\\\\n", stream);
  fputs("\\end{tabular}\\end{quote}\n", stream);
  fputs("{\\em Left display context:\\/}  & ", stream);
  fputs("{\\em Right display context:\\/}  & ", stream);
  fputs(outstr, outfd);
  fputs(pdr->AfterConcordance, stream);
  fputs(pdr->BeforeConcordance, stream);
  html_puts(stream, ":</EM></B>&nbsp;&nbsp;", 0);
  html_puts(stream, attribute_name, SUBST_ALL);
  html_puts(stream, line, SUBST_NONE); /* entities have already been escaped */
  if (EOF == fflush(conn_out)) {
  if (save_on_exit)
  if(need_to_abort) rcqp_receive_error(-1);
  Rprintf("%d", '\n');
  q, x   exit cwb-align-show
  return;                        /* exits on error, so there's no return value */
  sgml_puts(stream, "<align name=\"", 0);
  sgml_puts(stream, "\">", 0);
  sgml_puts(stream, attribute_name, 0);
  sgml_puts(stream, line, SUBST_NONE); /* entities have already been escaped */
  trap '(exit $?); exit' 1 2 13 15
  trap 'status=$?; rm -f "$dsttmp" "$rmtmp" && exit $status' 0
  va_start(AP, Format); Rvprintf( Format, AP); va_end(AP);
  while (!exit_cqp) {
  while (ok && (cqp_input_string_position < len) && !exit_cqp) {
  { NULL, "SaveOnExit",           OptBoolean, &save_on_exit,           NULL,         0,   NULL,   0,     OPTION_CQP },
 *   for( ; n > 0 ; n++)		/ * will exit on int overflow * /
 *  (returns on exit)
 *  exit command is reveived (CQI_CTRL_BYE)
 * @param error_code  Value to be returned by the program when it exits.
 * @param error_level  The exit code that is returned to the OS.
 * @param exit_code  Value to be returned by the program when it exits.
 * @param exit_on_parse_errors  Boolean: should CQP exit on parse errors?
 * @param format  Format string (and ...) are passed as arguments to vfprintf().
 * Cleans up memory prior to an error-prompted exit.
 * Closes the alignment file handle (if open) and exits the program.
 * Global error status for CQP (will be returned to the caller when CQP exits).
 * Macro which exits the program when a "to do" point is hit.
 * Outputs a blob of information on the mother-corpus of the specified cl.
 * Prints a message describing how to use the program to STDERR and then exits.
 * Prints a usage message and exits the program.
 * Prints an error message to cqpserver's STDERR and then exits.
 * STDERR. Also note that the program doesn't exit!
 * TODO work out whether cqpserver should exit with this error.
 * Then exits the program.
 * andRprintf the blob back to its virginal state.
 * exiting of course, but it is only supposed to be a demo.
 * exits the program if there are now just too many errors.
 * exits.)
 *Rprintf(
 * if ENSURE_COMPONENT_EXITS is defined, ensure_component will exit
 * print usage message and exit
 * to standard error and then shuts down the program with exit status 1.
#  define YYFPRINTF fprintf
# The final little trick to "correctly" pass the exit status to the exit trap.
#define TODO {(void)fprintf(stderr,"TODO point reached: file \"%s\", line %d\n", \
#define TTYback()	(backspace ? TTYputs((CHAR *)backspace) : TTYput('\b'))
* There are other functions as well. The most notable is @syntax()@ which is the "print help and exit" function and which is called by @parse_options()@
* There is a difference between this and @html-print@: there are @sgml_convert_string()@ and @sgml_puts()@ functions with replacement for &lt; &gt; &amp; &quot; (same as @html_print_@) but these functions are not declared in the header file
** "Outputs a list of the given s-attribute, with begin and end positions"
** @html_puts()@, which streams text to a file pointer with replacement for &lt; &gt; &amp; &quot; 
--help     display this help and exit.
--version  display version info and exit.
/*	   Rprintf("comparing %d %s %s\n",*lpos,patt,H.Lines[*lpos]+*cpos); */
/*     Rprintf( "Performing ->IDLIST opt\n"); */
/*    TTYputs((CHAR *)Prompt);
/*   Rprintf( "  -C <id>   (re-)encode corpus <id> (using data path from registry)\n"); */
/*   Rprintf( "  -r <dir>  set registry directory (for -C flag)\n"); */
/*  Rprintf( "  -d        debug mode (not implemented)\n"); *//* TODO -d / -D distinct as in cwb-compress-rdx? */
/* Rprintf( "Part of the IMS Open Corpus Workbench v" VERSION "\n\n");*/
/* ======================================== print error message and exit */
/* This used to be an fputs(), but since the string might contain NUL's,
/* advanced functions which read chunks of data [exit on error] */
/* send a CQi command (auto-flush) [exit on error] */
/** the top of the range of char_map's outputs @see char_map */
<a class="anchor" id="a6da4fd2cde8ab5a835a44764d35cf337"></a><!-- doxytag: member="cqp.h::exit_cqp" ref="a6da4fd2cde8ab5a835a44764d35cf337" args="" -->
<a class="anchor" id="a7c30de93f06347a9bc939e324afd1472"></a><!-- doxytag: member="cqp.c::cqp_parse_file" ref="a7c30de93f06347a9bc939e324afd1472" args="(FILE *fd, int exit_on_parse_errors)" -->
<a class="anchor" id="a7c30de93f06347a9bc939e324afd1472"></a><!-- doxytag: member="cqp.h::cqp_parse_file" ref="a7c30de93f06347a9bc939e324afd1472" args="(FILE *fd, int exit_on_parse_errors)" -->
<a class="anchor" id="a996d736c642833f3f5627fc3ab2be6cd"></a><!-- doxytag: member="html&#45;print.c::html_puts" ref="a996d736c642833f3f5627fc3ab2be6cd" args="(FILE *fd, char *s, int flags)" -->
<a class="anchor" id="a996d736c642833f3f5627fc3ab2be6cd"></a><!-- doxytag: member="html&#45;print.h::html_puts" ref="a996d736c642833f3f5627fc3ab2be6cd" args="(FILE *fd, char *s, int flags)" -->
<a class="anchor" id="ab8ca0c571bfb8947d2c22275d916a278"></a><!-- doxytag: member="options.h::save_on_exit" ref="ab8ca0c571bfb8947d2c22275d916a278" args="" -->
<a class="anchor" id="ad7cf66275f61ee2a4c311e6be49953ff"></a><!-- doxytag: member="sgml&#45;print.c::sgml_puts" ref="ad7cf66275f61ee2a4c311e6be49953ff" args="(FILE *fd, char *s, int flags)" -->
<a class="anchor" id="af5f2bf327a0159297c449e347860adbe"></a><!-- doxytag: member="cwb&#45;decode.c::decode_usage" ref="af5f2bf327a0159297c449e347860adbe" args="(int exit_code)" -->
<b>Value:</b><div class="fragment"><pre class="fragment">{(void)fprintf(stderr,<span class="stringliteral">&quot;TODO point reached: file \&quot;%s\&quot;, line %d\n&quot;</span>, \
<dl class="el"><dd class="mdescRight">1 iff exit-command was issued while parsing  <a href="#a6da4fd2cde8ab5a835a44764d35cf337"></a><br/></dl><li>char * <a class="el" href="cqp_8h.html#a27d0516bdf945bd7f60c3c9b66be0145">cqp_input_string</a>
<dl class="el"><dd class="mdescRight">Cleans up memory prior to an error-prompted exit.  <a href="#a54f67f8a8844e932573da86037cf4d15"></a><br/></dl><li>void <a class="el" href="cwb-decode_8c.html#af5f2bf327a0159297c449e347860adbe">decode_usage</a> (int exit_code)
<dl class="el"><dd class="mdescRight">Cleans up memory prior to an error-prompted exit.  <a href="#a9bf44db1f081bb32a0303e5c150d609f"></a><br/></dl><li>void <a class="el" href="cwb-compress-rdx_8c.html#ada27dd0455655c13cd8dca8259eefbfb">compress_reversed_index</a> (<a class="el" href="union___attribute.html">Attribute</a> *attr, char *output_fn)
<dl class="el"><dd class="mdescRight">Clears all fields in a MemBlob, regardless of their usage, andRprintf the blob back to its virginal state.  <a href="#abd08ed2afff7e65784899692560e52ff"></a><br/></dl><li>int <a class="el" href="storage_8c.html#a2c4c793bee0dd47e6f5fb822ba3beb09">alloc_mblob</a> (<a class="el" href="struct_t_mblob.html">MemBlob</a> *blob, int nr_items, int item_size, int clear_blob)
<dl class="el"><dd class="mdescRight">Clears all fields in a MemBlob, regardless of their usage, andRprintf the blob back to its virginal state.  <a href="#abd08ed2afff7e65784899692560e52ff"></a><br/></dl><li>int <a class="el" href="storage_8h.html#a2c4c793bee0dd47e6f5fb822ba3beb09">alloc_mblob</a> (<a class="el" href="struct_t_mblob.html">MemBlob</a> *blob, int nr_items, int item_size, int clear_blob)
<dl class="el"><dd class="mdescRight">Closes the alignment file handle (if open) and exits the program.  <a href="#ad495abb4e431b3a82b92fac60727d8e4"></a><br/></dl><li>void <a class="el" href="cwb-align-show_8c.html#a9c92b0eb9e3eabf8058aff644b5d8e1e">alignshow_end_of_alignment</a> (void)
<dl class="el"><dd class="mdescRight">Global variable containing a search string that is to be converted to a DFA.  <a href="#a73e30a4cafb3e8b359d93c3f5c4bc986"></a><br/></dl><li>int <a class="el" href="cqp_8h.html#a6da4fd2cde8ab5a835a44764d35cf337">exit_cqp</a>
<dl class="el"><dd class="mdescRight">Initialises the CQP program (or cqpserver or cqpcl).  <a href="#a313990999a7a7c5275682411e9b58c89"></a><br/></dl><li>int <a class="el" href="cqp_8c.html#a7c30de93f06347a9bc939e324afd1472">cqp_parse_file</a> (FILE *fd, int exit_on_parse_errors)
<dl class="el"><dd class="mdescRight">Initialises the CQP program (or cqpserver or cqpcl).  <a href="#a313990999a7a7c5275682411e9b58c89"></a><br/></dl><li>int <a class="el" href="cqp_8h.html#a7c30de93f06347a9bc939e324afd1472">cqp_parse_file</a> (FILE *fd, int exit_on_parse_errors)
<dl class="el"><dd class="mdescRight">Macro which exits the program when a "to do" point is hit.  <a href="#ac610b33ec571920dfe1c0f5d93f60516"></a><br/></dl></ul>
<dl class="el"><dd class="mdescRight">Outputs a blob of information on the mother-corpus of the specified cl.  <a href="#ac68b1c252026e89999641e0c010a5ad2"></a><br/></dl><li>void <a class="el" href="output_8c.html#a9011974dd5e28226d681e0027ef153d5">free_tabulation_list</a> (void)
<dl class="el"><dd class="mdescRight">Outputs a blob of information on the mother-corpus of the specified cl.  <a href="#ac68b1c252026e89999641e0c010a5ad2"></a><br/></dl><li>void <a class="el" href="output_8h.html#ac523a4b34d2f925e027d8f433de703c9">cqpmessage</a> (<a class="el" href="output_8h.html#ab99a871a48aa4a469a52afaf130659c3">MessageType</a> type, char *format,...)
<dl class="el"><dd class="mdescRight">Prints a message describing how to use the program to STDERR and then exits.  <a href="#a3e17f6b6f17ece48948aef358a8c981a"></a><br/></dl><li>int <a class="el" href="cwb-lexdecode_8c.html#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (int argc, char **argv)
<dl class="el"><dd class="mdescRight">Prints a message describing how to use the program to STDERR and then exits.  <a href="#a523798f68b16d22aaff52d49df477a56"></a><br/></dl><li>int <a class="el" href="cwb-align-show_8c.html#aef1135373314f0032cd6713275eb709d">alignshow_parse_args</a> (int ac, char *av[], int min_args)
<dl class="el"><dd class="mdescRight">Prints a message describing how to use the program to STDERR and then exits.  <a href="#a5aa5525746af1ecd8470f538b642d3d1"></a><br/></dl><li>int <a class="el" href="cwb-align-encode_8c.html#ae16c4d7f8cd95c2aa0a2765e5256a010">alignencode_parse_args</a> (int ac, char *av[], int min_args)
<dl class="el"><dd class="mdescRight">Prints a message describing how to use the program to STDERR and then exits.  <a href="#aa44d9d428a2436a99171f75726060f7d"></a><br/></dl><li>int <a class="el" href="cwb-s-decode_8c.html#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (int argc, char **argv)
<dl class="el"><dd class="mdescRight">Prints a message describing how to use the program to STDERR and then exits.  <a href="#af6030de411ccb672b3c31e9020db724d"></a><br/></dl><li>void <a class="el" href="cwb-describe-corpus_8c.html#a7e8fd5e0d125d848233198d5275f18d7">describecorpus_show_attribute_names</a> (<a class="el" href="struct_t_corpus.html">Corpus</a> *<a class="el" href="cwb-s-encode_8c.html#aca3a1fb765418f9b9b1d74051aa88667">corpus</a>, int type)
<dl class="el"><dd class="mdescRight">Prints a usage message and exits the program.  <a href="#a1adaf2f54307eac8ae4722646b994a0b"></a><br/></dl><li>int <a class="el" href="cwb-makeall_8c.html#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (int argc, char **argv)
<dl class="el"><dd class="mdescRight">Prints a usage message and exits the program.  <a href="#a48c580680a1c3e3bebdcb1af8426496d"></a><br/></dl><li>void <a class="el" href="cwb-compress-rdx_8c.html#a9bf44db1f081bb32a0303e5c150d609f">compressrdx_cleanup</a> (int error_code)
<dl class="el"><dd class="mdescRight">Prints a usage message and exits the program.  <a href="#a72430d2277a4b79020097a4f3eb0d153"></a><br/></dl><li>int <a class="el" href="cwb-scan-corpus_8c.html#a291e5974237485d06cc8da932a1d98a0">scancorpus_parse_options</a> (int argc, char *argv[])
<dl class="el"><dd class="mdescRight">Prints a usage message and exits the program.  <a href="#aad76daf11045beaf13d02a94ed139c90"></a><br/></dl><li>void <a class="el" href="cwb-huffcode_8c.html#ae4acae438f7c64ed210064298db7d2a9">bprintf</a> (unsigned int i, int width, FILE *stream)
<dl class="el"><dd class="mdescRight">Prints a usage message and exits the program.  <a href="#ab4563ab00458b1d151447d7f3e52b785"></a><br/></dl><li>void <a class="el" href="cwb-encode_8c.html#a7d068098204f7dce67db3c1eafa49b22">encode_print_input_lineno</a> (void)
<dl class="el"><dd class="mdescRight">Prints a usage message and exits the program.  <a href="#af5f2bf327a0159297c449e347860adbe"></a><br/></dl><li>int <a class="el" href="cwb-decode_8c.html#a5ea55cc614294723f5f189166a290525">is_num</a> (char *s)
<dl class="el"><dd class="mdescRight">Prints an error message to cqpserver's STDERR and then exits.  <a href="#a67fc248219cfa8b57ea5d640434ca2bd"></a><br/></dl><li>void <a class="el" href="server_8c.html#a8ee48d45dd3272bc77acc6d4469489e5">cqi_internal_error</a> (char *function, char *cause)
<dl class="el"><dd class="mdescRight">Prints an error message to cqpserver's STDERR and then exits.  <a href="#a8ee48d45dd3272bc77acc6d4469489e5"></a><br/></dl><li>void <a class="el" href="server_8c.html#ab467d3527f874f025cab67ae1610dda8">cqi_general_error</a> (char *errstring)
<dl class="el"><dd class="mdescRight">Prints an error message to cqpserver's STDERR and then exits.  <a href="#afdf5768c6ea89dcf125cc56b9adb0bba"></a><br/></dl><li>void <a class="el" href="server_8c.html#a67fc248219cfa8b57ea5d640434ca2bd">cqi_recv_error</a> (char *function)
<dl class="el"><dd class="mdescRight">Prints an error message to NULL, and exits the program if there are now just too many errors.  <a href="#af1954d75ca1f8a905a989759ab99ef38"></a><br/></dl><li><a class="el" href="regex2dfa_8c.html#a85e55e51529e83620c77e05854041f8c">Lexical</a> <a class="el" href="regex2dfa_8c.html#a5241ab804487d705a2d196269abc4fd5">LEX</a> (void)
<dl class="el"><dd class="mdescRight">Prints the usage message for the different CQP applications to standard error and then shuts down the program with exit status 1.  <a href="#a093f7fee1357e619b7c8fc96e80661d3"></a><br/></dl><li>void <a class="el" href="options_8c.html#a88074ed42b7b3f0e4854f823d1520d9d">print_option_value</a> (int opt)
<dl class="el"><dd class="mdescRight">automatically save subcorpora  <a href="#afc84e72df34373fab31b7bb59727dff0"></a><br/></dl><li>int <a class="el" href="options_8h.html#ab8ca0c571bfb8947d2c22275d916a278">save_on_exit</a>
<dl class="el"><dd class="mdescRight">boolean: do_show should just print the size of the lexicon and exit?  <a href="#ac36d157c4d0ee0037e8322886d72a701"></a><br/></dl><li>int <a class="el" href="cwb-lexdecode_8c.html#a4271d02d7b39132da64775afecb297ba">freq_0_if_unknown</a> = 0
<dl class="el"><dd class="mdescRight">print usage message and exit  <a href="#a66462fc5630af31b0b2e973c5f22bcc6"></a><br/></dl><li>void <a class="el" href="cwb-s-encode_8c.html#afc69b400cbf699fdedc0fadcc7cc9434">sencode_declare_new_satt</a> (char *name, char *<a class="el" href="cwb-encode_8c.html#a8eadc6730ef4fbdae87a20414b789faf">directory</a>, int store_values)
<dl class="el"><dd class="mdescRight">save unsaved subcorpora upon exit  <a href="#ab8ca0c571bfb8947d2c22275d916a278"></a><br/></dl><li>char * <a class="el" href="options_8h.html#a1a9190a61c97e5e0a98f958f04a5fdd2">cqp_init_file</a>
<dl class="el"><dd class="mdescRight">the top of the range of char_map's outputs  <a href="#a55ded3a7db80f158c668c5dfd764dca9"></a><br/></dl><li>unsigned char <a class="el" href="feature__maps_8c.html#a23ef6ec1a12d6eea4de5810062a9668c">char_map</a> [256]
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="corpus_8c.html#ae01d418374c30b37fcd6b9bbfacef90e" title="Gets a string containing the path of the default registry directory.">cl_standard_registry</a> <a class="el" href="globals_8h.html#ac610b33ec571920dfe1c0f5d93f60516" title="Macro which exits the program when a &quot;to do&quot; point is hit.">TODO</a>: would this be better as a static variable WITHIN that function? That way there is no change of anyone acessing the <a class="el" href="corpus_8c.html#ae6ef637d7447e7a251e9130f21b8adac" title="The default registry directory.">regdir</a> variable except via that function... </dd></dl>
<li>"Outputs a list of the given s-attribute, with begin and end positions"</li>
<li><code>html_puts()</code>, which streams text to a file pointer with replacement for &lt; &gt; &amp; &#34; </li>
<li>There are other functions as well. The most notable is <code>syntax()</code> which is the "print help and exit" function and which is called by <code>parse_options()</code></li>
<li>There is a difference between this and <code>html-print</code>: there are <code>sgml_convert_string()</code> and <code>sgml_puts()</code> functions with replacement for &lt; &gt; &amp; &#34; (same as <code>html_print_</code>) but these functions are not declared in the header file</li>
<li>exit_cqp
<li>html_puts()
<li>save_on_exit
<li>sgml_puts()
<li>void <a class="el" href="html-print_8c.html#a996d736c642833f3f5627fc3ab2be6cd">html_puts</a> (FILE *fd, char *s, int flags)
<li>void <a class="el" href="html-print_8h.html#a996d736c642833f3f5627fc3ab2be6cd">html_puts</a> (FILE *fd, char *s, int flags)
<li>void <a class="el" href="sgml-print_8c.html#ad7cf66275f61ee2a4c311e6be49953ff">sgml_puts</a> (FILE *fd, char *s, int flags)
<p>1 iff exit-command was issued while parsing </p>
<p>Cleans up memory prior to an error-prompted exit. </p>
<p>Clears all fields in a MemBlob, regardless of their usage, andRprintf the blob back to its virginal state. </p>
<p>Closes the alignment file handle (if open) and exits the program. </p>
<p>Macro which exits the program when a "to do" point is hit. </p>
<p>Note that unlike other CQi error functions, this function sends an error message to the outgoing connection, rather than printing to the server's STDERR. Also note that the program doesn't exit!</p>
<p>On *nix, forking happens UNLESS the global private_server is true. (Actually, if private_server is true, then forking still happens, but the parent process immeidately exits.)</p>
<p>Outputs a blob of information on the mother-corpus of the specified cl. </p>
<p>Prints a message describing how to use the program to STDERR and then exits. </p>
<p>Prints a usage message and exits the program. </p>
<p>Prints an error message to cqpserver's STDERR and then exits. </p>
<p>Prints an error message to NULL, and exits the program if there are now just too many errors. </p>
<p>Prints the usage message for the different CQP applications to standard error and then shuts down the program with exit status 1. </p>
<p>Referenced by <a class="el" href="html-print_8h.html#a996d736c642833f3f5627fc3ab2be6cd">html_puts()</a>.</p>
<p>Referenced by <a class="el" href="sgml-print_8c.html#ad7cf66275f61ee2a4c311e6be49953ff">sgml_puts()</a>.</p>
<p>References <a class="el" href="cqp_8h.html#a27d0516bdf945bd7f60c3c9b66be0145">cqp_input_string</a>, <a class="el" href="cqp_8h.html#a099bf71badf39387256aa765f798e608">cqp_input_string_position</a>, <a class="el" href="output_8c.html#ac523a4b34d2f925e027d8f433de703c9">cqpmessage()</a>, <a class="el" href="options_8h.html#ac77cbe1636407b6a256fc41b86bcae61ac22272c602812d303f7cdc75c2e3323b">cqpserver</a>, <a class="el" href="output_8h.html#a9c2eeea9cd09fb001747ef4cc99399a4a4dfd42ec49d09d8c6555c218301cc30f">Error</a>, <a class="el" href="cqp_8h.html#a6da4fd2cde8ab5a835a44764d35cf337">exit_cqp</a>, <a class="el" href="options_8h.html#ad53e63bcd94f1ad540b16323bedf63e7">which_app</a>, and <a class="el" href="cqp_8c.html#a847a2de5c1c28c9d7055a2b89ed7dad7">yyparse()</a>.</p>
<p>References <a class="el" href="options_8h.html#a589e4b294834e4afa88f3b5f78e3ff56">child_process</a>, <a class="el" href="cqp_8c.html#a6ce71516b2d8309447ccdd714f6ae6be">cqp_file_p</a>, <a class="el" href="cqp_8c.html#a52e6d6a7709b683e9a681bdabb461ab0">cqp_files</a>, <a class="el" href="corpmanag_8h.html#a1f1c9e6e4dec994353f8d8ee00f38faa">current_corpus</a>, <a class="el" href="cqp_8h.html#a6da4fd2cde8ab5a835a44764d35cf337">exit_cqp</a>, <a class="el" href="cqp_8h.html#ad5235aab566e2c8017152e458a348c6f">MAXCQPFILES</a>, <a class="el" href="structcl.html#a24268424ee0678c4ff66ef929d88eed3">cl::mother_name</a>, <a class="el" href="structcl.html#a5ac083a645d964373f022d03df4849c8">cl::name</a>, <a class="el" href="cwb-scan-corpus_8c.html#a55602ca214fb365e8deef9a73c8442e7">quiet</a>, <a class="el" href="cqp_8c.html#a3818b52c87d9e25995878f0719a1f15e">reading_cqprc</a>, <a class="el" href="options_8h.html#ab8ca0c571bfb8947d2c22275d916a278">save_on_exit</a>, <a class="el" href="corpmanag_8c.html#ae509346bd5e7c713d70748e9926f1cdd">save_unsaved_subcorpora()</a>, <a class="el" href="options_8h.html#a582e2ef9670c974c00e00ad10af0e629">silent</a>, <a class="el" href="structcl.html#a439227feff9d7f55384e8780cfc2eb82">cl::size</a>, <a class="el" href="macros_8h.html#aedf9a4cdd75e574d55f252e31d2ec453">STREQ</a>, <a class="el" href="cqp_8c.html#a46af646807e0797e72b6e8945e7ea88b">yyin</a>, <a class="el" href="cqp_8c.html#a847a2de5c1c28c9d7055a2b89ed7dad7">yyparse()</a>, and <a class="el" href="cqp_8c.html#ab657ddef65d43cc3ab8dfc2cad0ac5b8">yyrestart()</a>.</p>
<p>References <a class="el" href="options_8h.html#a73e78b4630e651400f3e4fc60b3969f8">batchfd</a>, <a class="el" href="options_8h.html#a05c758689b70c64711a1789bff29f60c">batchmode</a>, <a class="el" href="corpmanag_8c.html#a7fe1322b68023d0c8969fac787155280">check_available_corpora()</a>, <a class="el" href="options_8h.html#a589e4b294834e4afa88f3b5f78e3ff56">child_process</a>, <a class="el" href="cl_8h.html#a9e15a3c725711d9effd623b2f3e225be">cl_free</a>, <a class="el" href="cl_8h.html#a4e4eccd789155123ab533ed0cecbecea">cl_malloc()</a>, <a class="el" href="cl_8h.html#ae33baa79e30f7b5efb597baa4e6898cb">cl_randomize()</a>, <a class="el" href="corpmanag_8c.html#a220e504e73789733727e6565941ce2c0">corpuslist</a>, <a class="el" href="cqp_8c.html#a6ce71516b2d8309447ccdd714f6ae6be">cqp_file_p</a>, <a class="el" href="options_8h.html#a1a9190a61c97e5e0a98f958f04a5fdd2">cqp_init_file</a>, <a class="el" href="cqp_8c.html#a7c30de93f06347a9bc939e324afd1472">cqp_parse_file()</a>, <a class="el" href="cqp_8h.html#aace00ea783224db959e89e3b99eeb27f">CQPMACRORC_NAME</a>, <a class="el" href="output_8c.html#ac523a4b34d2f925e027d8f433de703c9">cqpmessage()</a>, <a class="el" href="cqp_8h.html#a14cd87564d1bc606e0515cb52c6be769">CQPRC_NAME</a>, <a class="el" href="options_8h.html#ac77cbe1636407b6a256fc41b86bcae61ac22272c602812d303f7cdc75c2e3323b">cqpserver</a>, <a class="el" href="options_8h.html#af76965244a07bfe630d001af323482b4">default_corpus</a>, <a class="el" href="eval_8h.html#a4fc26b79d5e2fea9774fdf3c7b17d1b8">eep</a>, <a class="el" href="options_8h.html#abb9f00607f69c02d395e8219f8f08b8c">enable_macros</a>, <a class="el" href="cqp_8h.html#a6da4fd2cde8ab5a835a44764d35cf337">exit_cqp</a>, <a class="el" href="macro_8c.html#a46c1888ead3a4dd40dff9eb80c4d7c97">init_macros()</a>, <a class="el" href="options_8h.html#a3601d5ee126fa2e974a45288b7041bbd">macro_init_file</a>, <a class="el" href="options_8c.html#a3b63ff1af997333f51cad78bf921732a">parse_options()</a>, <a class="el" href="options_8h.html#a20ba618f37578ad21378433550516222">parser_debug</a>, <a class="el" href="cqp_8c.html#a3818b52c87d9e25995878f0719a1f15e">reading_cqprc</a>, <a class="el" href="corpmanag_8c.html#a9ba7a43161a1082a4db9b0f4d1a47f48">set_current_corpus_name()</a>, <a class="el" href="globals_8h.html#aa3cbd33788dfd77d29dc892204a609a5">SUBDIR_SEPARATOR</a>, <a class="el" href="corpmanag_8h.html#ab595f682e895370f86580c128681d88ea632fa39438c1676b435ec43e6a0f9647">UNDEF</a>, <a class="el" href="output_8h.html#a9c2eeea9cd09fb001747ef4cc99399a4a48f2bb70fceb692a2dedd8cea496c44b">Warning</a>, and <a class="el" href="options_8h.html#ad53e63bcd94f1ad540b16323bedf63e7">which_app</a>.</p>
<p>References <a class="el" href="print-modes_8c.html#ad7089bc584cdfad0bfeb446247b379a2">GlobalPrintOptions</a>, <a class="el" href="html-print_8c.html#a996d736c642833f3f5627fc3ab2be6cd">html_puts()</a>, <a class="el" href="struct__print__option__rec__.html#a8ecdca2e280ec035893b38f8f2380979">_print_option_rec_::print_tabular</a>, <a class="el" href="struct__print__option__rec__.html#a4177182770d272289e4f8c2931934a99">_print_option_rec_::print_wrap</a>, <a class="el" href="html-print_8h.html#a6033a721c460fe4c779ceaf0dfb7a334">SUBST_ALL</a>, and <a class="el" href="html-print_8h.html#a5cc4f7c82d8ce1d0d76379628690f254">SUBST_NONE</a>.</p>
<p>References <a class="el" href="sgml-print_8c.html#ad7cf66275f61ee2a4c311e6be49953ff">sgml_puts()</a>, and <a class="el" href="sgml-print_8c.html#a5cc4f7c82d8ce1d0d76379628690f254">SUBST_NONE</a>.</p>
<p>References <a class="el" href="struct__grouptable.html#a7182b661c61614464e669f95f786a309">_grouptable::count_cells</a>, <a class="el" href="struct__id__cnt__mapping.html#ae0d22272b68e75d19ac0b80c01f806b6">_id_cnt_mapping::freq</a>, <a class="el" href="groups_8c.html#a4a3455ceda70032b48a75c24f9064512">Group_id2str()</a>, <a class="el" href="html-print_8c.html#a996d736c642833f3f5627fc3ab2be6cd">html_puts()</a>, <a class="el" href="struct__grouptable.html#aa6e3b6f5feb3d1004ca3803fb6bfa6dd">_grouptable::nr_cells</a>, <a class="el" href="struct__id__cnt__mapping.html#a339d22b3e442946380f98ed19e320db2">_id_cnt_mapping::s</a>, <a class="el" href="html-print_8h.html#a6033a721c460fe4c779ceaf0dfb7a334">SUBST_ALL</a>, and <a class="el" href="struct__id__cnt__mapping.html#ac310d9181e916ba43604099aee272c71">_id_cnt_mapping::t</a>.</p>
<p>References <a class="el" href="struct__grouptable.html#a7182b661c61614464e669f95f786a309">_grouptable::count_cells</a>, <a class="el" href="struct__id__cnt__mapping.html#ae0d22272b68e75d19ac0b80c01f806b6">_id_cnt_mapping::freq</a>, <a class="el" href="groups_8c.html#a4a3455ceda70032b48a75c24f9064512">Group_id2str()</a>, <a class="el" href="struct__grouptable.html#aa6e3b6f5feb3d1004ca3803fb6bfa6dd">_grouptable::nr_cells</a>, <a class="el" href="struct__id__cnt__mapping.html#a339d22b3e442946380f98ed19e320db2">_id_cnt_mapping::s</a>, <a class="el" href="sgml-print_8c.html#ad7cf66275f61ee2a4c311e6be49953ff">sgml_puts()</a>, <a class="el" href="sgml-print_8c.html#a6033a721c460fe4c779ceaf0dfb7a334">SUBST_ALL</a>, and <a class="el" href="struct__id__cnt__mapping.html#ac310d9181e916ba43604099aee272c71">_id_cnt_mapping::t</a>.</p>
<p>The loops starts running when this function is called, and when the exit command is reveived (CQI_CTRL_BYE) (returns on exit) </p>
<p>Then exits the program.</p>
<p>boolean: do_show should just print the size of the lexicon and exit? </p>
<p>fprintf(stderr, "Found %d matches; avoided regex matching %d times out of %d trials", hits, <a class="el" href="cl_8h.html#ac579f14edd519c3f2aa4a4cb33c76fcb" title="Get a reading from the &quot;success counter&quot; for optimised regexes.">cl_regopt_count_get()</a>, n );</p>
<p>print usage message and exit </p>
<p>save unsaved subcorpora upon exit </p>
<p>the top of the range of char_map's outputs </p>
After the usage message is printed, B<cwb-atoi> will exit.
After the usage message is printed, B<cwb-compress-rdx> will exit.
After the usage message is printed, B<cwb-decode> will exit.
After the usage message is printed, B<cwb-describe-corpus> will exit.
After the usage message is printed, B<cwb-encode> will exit.
After the usage message is printed, B<cwb-huffcode> will exit.
After the usage message is printed, B<cwb-itoa> will exit.
After the usage message is printed, B<cwb-lexdecode> will exit.
After the usage message is printed, B<cwb-makeall> will exit.
After the usage message is printed, B<cwb-s-decode> will exit.
After the usage message is printed, B<cwb-scan-corpus> will exit.
After the usage message is printed, CQP will exit.
EOLCmd:           EOL_SYM               {Rprintf("-::-EOL-::-\n"); rcqp_flush(); }
STATIC void TTYputs(EL_CONST CHAR *p)
STATIC void TTYputs(EL_CONST CHAR *p);
Shows program version and copyright information, then exits.
That is, the child server will persist in the background listening on its port, while the parent server exits, returning 
To exit the CQPserver and accept no further connections, press
Type your end-of-file character (probably control-D) to exit the test
\$INSTALL \$INSTFLAGS_DATA \$INSTFLAGS_EXTRA include/cwb/cl.h "\${REALINCDIR}" || exit 1
\$INSTALL \$INSTFLAGS_DATA \$INSTFLAGS_EXTRA include/cwb/cqi.h "\${REALINCDIR}" || exit 1
\$INSTALL \$INSTFLAGS_DATA \$INSTFLAGS_EXTRA lib/libcl.a "\${LIBDIR}" || exit 1
and then exit.
cqp_parse_file(FILE *fd, int exit_on_parse_errors)
decode_usage(int exit_code)
exit
exit            { return(EXIT_SYM); }
extern void     rcqp_receive_error();
html_puts(FILE *fd, char *s, int flags)
html_puts(FILE *fd, char *s, int flags);
int cqp_parse_file(FILE *fd, int exit_on_parse_errors);
int exit_cqp;                   /**< 1 iff exit-command was issued while parsing */
int save_on_exit;                 /**< save unsaved subcorpora upon exit */
int show_size_only = 0;     /**< boolean: do_show should just print the size of the lexicon and exit? */
program to check all is well. To exit form the test program type
sgml_puts(FILE *fd, char *s, int flags)
sh instutils/cwb-config.in > bin/cwb-config || exit 1
